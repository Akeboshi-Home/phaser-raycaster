{"version":3,"sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/raycaster-core.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-tilemap-methods.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setRange","range","Phaser","Math","MAX_SAFE_INTEGER","this","Geom","Line","SetToAngle","_ray","origin","x","y","angle","setDetectionRange","detectionRange","detectionRangeCircle","setTo","boundsInRange","objectBounds","bounds","getBounds","Intersects","CircleToRectangle","setAngle","Angle","Normalize","setAngleDeg","DegToRad","setCone","cone","setConeDeg","PhaserRaycaster","scene","systems","sys","settings","isBooted","events","once","boot","register","PluginManager","eventEmitter","on","start","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","destroy","test","console","log","time","delta","undefined","createRaycaster","options","_Raycaster","constructor","require","Raycaster","version","graphics","boundingBox","mappedObjects","sortedPoints","mapSegmentCount","physics","world","setOptions","autoUpdate","add","lineStyle","width","color","fillStyle","objects","mapGameObjects","setBoundingBox","height","rectangle","Rectangle","points","segments","Point","left","top","right","bottom","length","push","dynamic","segmentCount","Array","isArray","includes","data","setDataEnabled","map","Map","set","config","option","removeMappedObjects","index","indexOf","splice","enableMaps","active","disableMaps","mapppedObject","updateMap","createRay","Ray","type","_points","_segments","getPoints","getSegments","getIntersections","line","polygon","arc","container","tilemap","setSegmentCount","collisionTiles","setCollisionTiles","setOrigin","getTopLeft","getTopRight","getBottomRight","getBottomLeft","offset","displayWidth","originX","displayHeight","originY","pointA","geom","getPointA","pointB","getPointB","rotation","vectorA","scaleX","scaleY","Length","vectorB","point","vector","closePath","last","ray","rayA","rayB","cB","rayLength","sqrt","pow","radius","dAngle","asin","newPoints","count","getCircles","tempRay","_raycaster","list","child","iterate","childPoints","segment","iLength","childA","mapA","j","jLength","childB","mapB","RectangleToRectangle","segmentA","segmentB","intersection","LineToLine","Distance","Between","x1","y1","x2","y2","LineToCircle","horizontal","horizontals","verticals","layer","row","tile","upperEdge","leftEdge","vertical","tileWidth","tileHeight","verticalsLastColumn","column","filter","horizontalSegment","tiles","raycaster","Circle","ignoreNotIntersectedRays","intersections","setRay","cast","castCircle","castCone","angleDeg","coneDeg","closestIntersection","closestDistance","GetLineToRectangle","distance","target","Equals","isTangent","circleIntersections","circle","GetLineToCircle","originalAngle","maps","rayTargets","testedObjects","objectB","sort","a","b","intersectionA","intersectionB","minAngle","maxAngle","angleOffsetDeg","RadToDeg","ShortestBetween","abs"],"mappings":"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","file":"phaser-raycaster.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n * Set ray's range.\n *\n * @function Ray.setRange\n * @since 0.6.0\n *\n * @param {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\n *\n * @return {object} Ray object.\n */\nexport function setRange(range = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.range = range;\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\n    return this;\n}\n\n/**\n * Set ray's range.\n *\n * @function Ray.setRange\n * @since 0.6.0\n *\n * @param {integer} [detectionRange] = Phaser.Math.MAX_SAFE_INTEGER - Maximum distance between ray's position and tested objects bounding boxes.\n *\n * @return {object} Ray object.\n */\nexport function setDetectionRange(detectionRange = 0) {\n    this.detectionRange = detectionRange;\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n    return this;\n}\n\n/**\n * Test if object's bounding box is in ray's detection range.\n *\n * @function Ray.boundsInRange\n * @since 0.6.0\n *\n * @param {object} object - Tested object\n * @param {Phaser.Geom. Rectangle} / {boolean} [bounds] = false - Tested object's bounds. If not passed bounds will be generated.\n *\n * @return {boolean} Information if object is in ray's detection range.\n */\nexport function boundsInRange(object, bounds = false) {\n    if(!this.detectionRange)\n        return true;\n\n    let objectBounds;\n    if(bounds)\n        objectBounds = bounds;\n    else\n        objectBounds = object.getBounds();\n\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\n        return true;\n\n    return false;\n}\n","/**\n * Set ray angle in radians.\n *\n * @function Ray.setAngle\n * @since 0.6.0\n *\n * @param {float} [angle] - Ray's angle in radians.\n *\n * @return {object} Ray object.\n */\nexport function setAngle(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\n    return this;\n}\n\n/**\n * Set ray angle in degrees.\n *\n * @function Ray.setAngleDeg\n * @since 0.6.1\n *\n * @param {float} [angle] - Ray's angle in degrees.\n *\n * @return {object} Ray object.\n */\nexport function setAngleDeg(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\n    return this;\n}\n","/**\n * Set ray's cone angle in radians.\n *\n * @function Ray.setAngle\n * @since 0.7.0\n *\n * @param {float} [cone] - Ray's cone angle in radians.\n *\n * @return {object} Ray object.\n */\nexport function setCone(cone = 0) {\n    this.cone = cone;\n    return this;\n}\n\n/**\n * Set ray's cone angle in degrees.\n *\n * @function Ray.setAngleDeg\n * @since 0.7.0\n *\n * @param {float} [cone] - Ray's cone angle in degrees.\n *\n * @return {object} Ray object.\n */\nexport function setConeDeg(cone = 0) {\n    this.cone = Phaser.Math.DegToRad(cone);\n    return this;\n}\n","var PhaserRaycaster = function (scene)\r\n{\r\n    //The Scene that owns this plugin\r\n    this.scene = scene;\r\n\r\n    this.systems = scene.sys;\r\n\r\n    if (!scene.sys.settings.isBooted)\r\n    {\r\n        scene.sys.events.once('boot', this.boot, this);\r\n    }\r\n};\r\n\r\n//Static function called by the PluginFile Loader.\r\nPhaserRaycaster.register = function (PluginManager)\r\n{\r\n    //  Register this plugin with the PluginManager, so it can be added to Scenes.\r\n\r\n    //  The first argument is the name this plugin will be known as in the PluginManager. It should not conflict with already registered plugins.\r\n    //  The second argument is a reference to the plugin object, which will be instantiated by the PluginManager when the Scene boots.\r\n    //  The third argument is the local mapping. This will make the plugin available under `this.sys.base` and also `this.base` from a Scene if\r\n    //  it has an entry in the InjectionMap.\r\n    PluginManager.register('PhaserRaycaster', PhaserRaycaster, 'base');\r\n};\r\n\r\nPhaserRaycaster.prototype = {\r\n\r\n    //  Called when the Plugin is booted by the PluginManager.\r\n    //  If you need to reference other systems in the Scene (like the Loader or DisplayList) then set-up those references now, not in the constructor.\r\n    boot: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\r\n        //  If you don't need any of these events then remove the listeners and the relevant methods too.\r\n\r\n        eventEmitter.on('start', this.start, this);\r\n\r\n        eventEmitter.on('preupdate', this.preUpdate, this);\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.on('postupdate', this.postUpdate, this);\r\n\r\n        eventEmitter.on('pause', this.pause, this);\r\n        eventEmitter.on('resume', this.resume, this);\r\n\r\n        eventEmitter.on('sleep', this.sleep, this);\r\n        eventEmitter.on('wake', this.wake, this);\r\n\r\n        eventEmitter.on('shutdown', this.shutdown, this);\r\n        eventEmitter.on('destroy', this.destroy, this);\r\n    },\r\n\r\n    //A test method.\r\n    test: function (name)\r\n    {\r\n        console.log('RaycasterPlugin says hello ' + name + '!');\r\n    },\r\n\r\n    //Called when a Scene is started by the SceneManager. The Scene is now active, visible and running.\r\n    start: function ()\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 1\r\n    preUpdate: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 2\r\n    update: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 3\r\n    postUpdate: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\r\n    pause: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is resumed from a paused state.\r\n    resume: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\r\n    sleep: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is woken from a sleeping state.\r\n    wake: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\r\n    shutdown: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is destroyed by the Scene Manager. There is no coming back from a destroyed Scene, so clear up all resources here.\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene = undefined;\r\n    },\r\n\r\n    //Create Raycaster object\r\n    createRaycaster: function(options = {}) {\r\n        options.scene = this.scene;\r\n        return new this._Raycaster(options);\r\n    }\r\n\r\n};\r\n\r\nPhaserRaycaster.prototype.constructor = PhaserRaycaster;\r\nPhaserRaycaster.prototype._Raycaster = require('./raycaster-core.js').Raycaster;\r\n\r\n//Make sure you export the plugin for webpack to expose\r\n\r\nmodule.exports = PhaserRaycaster;\r\n","/**\r\n* @author       Marcin Walczak <mail@marcinwalczak.pl>\r\n* @copyright    2020 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responible for creating ray objects and managing mapped objects.\r\n *\r\n * @class Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Ray specific configuration settings.\r\n */\r\nexport function Raycaster(options) {\r\n    this.version = '0.7.3';\r\n    this.scene;\r\n    this.graphics;\r\n    this.boundingBox = false;\r\n    this.mappedObjects = [];\r\n    this.sortedPoints = [];\r\n    this.mapSegmentCount = 0;   //quantity of segments of map of circle\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined && options.scene.physics !== undefined)\r\n            options.boundingBox = options.scene.physics.world.bounds;\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update.bind(this));\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update.bind(this));\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    //set options\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n        }\r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    //set bounding box\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    //map object\r\n    mapGameObjects: function(objects, dynamic = false, options = {}) {\r\n        options.dynamic = dynamic;\r\n        options.segmentCount = (options.segmentCount !== undefined) ? options.segmentCount : this.segmentCount;\r\n\r\n        if(!Array.isArray(objects)) {\r\n            if(this.mappedObjects.includes(objects))\r\n                return this;\r\n\r\n            if(!objects.data)\r\n                objects.setDataEnabled();\r\n\r\n            options.object = objects;\r\n\r\n            let map = new this.Map(options);\r\n\r\n            objects.data.set('raycasterMap', map);\r\n            this.mappedObjects.push(objects);\r\n\r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            if(!object.data)\r\n                object.setDataEnabled();\r\n\r\n            let config = {};\r\n            for(let option in options) {\r\n                config[option] = options[option];\r\n            }\r\n            config.object = object;\r\n            \r\n            let map = new this.Map(config);\r\n\r\n            object.data.set('raycasterMap', map);\r\n            this.mappedObjects.push(object);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    //remove mapped Objects\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            let index = this.mappedObjects.indexOf(objects);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1)\r\n            return this;\r\n        }\r\n\r\n        for(let object of objects) {\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1)\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //enable maps\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            if(objects.data) {\r\n                let map = objects.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = true;\r\n            }\r\n                \r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(object.data) {\r\n                let map = object.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = true;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //disable maps\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            if(objects.data) {\r\n                let map = objects.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = false;\r\n            }\r\n                \r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(object.data) {\r\n                let map = object.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = false;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //scene update event listener\r\n    update: function() {\r\n        //update dynamic maps\r\n        if(this.mappedObjects.length > 0)\r\n            for(let mapppedObject of this.mappedObjects) {\r\n                if(mapppedObject.data === undefined)\r\n                    continue;\r\n\r\n                let map = mapppedObject.data.get('raycasterMap')\r\n                if(map.dynamic)\r\n                    map.updateMap();\r\n            }\r\n    },\r\n\r\n    //ray factory\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n","/**\r\n * @classdesc\r\n *\r\n * Map class responible for mapping game objects.\r\n *\r\n * @class Map\r\n * @memberof Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Map specific configuration settings.\r\n * @param {Raycaster} [raycaster] - Parent raycaster object.\r\n */\r\nexport function Map(options) {\r\n    this.type;\r\n    this.active;\r\n    this.dynamic;\r\n    this.object;\r\n    this._points = [];\r\n    this._segments = [];\r\n    this.getPoints;\r\n    this.getSegments;\r\n    this.getIntersections;\r\n\r\n    this.config(options);\r\n    this.updateMap();\r\n\r\n    return this;\r\n};\r\n\r\nMap.prototype = {\r\n    config: require('./config.js').config\r\n};\r\n\r\nMap.prototype.constructor = Map;\r\n","let rectangle = require('./map-rectangle-methods.js');\r\nlet line = require('./map-line-methods.js');\r\nlet polygon = require('./map-polygon-methods.js');\r\nlet arc = require('./map-circle-methods.js');\r\nlet segmentCount = require('./segmentsCount.js');\r\nlet container = require('./map-container-methods.js');\r\nlet tilemap = require('./map-tilemap-methods.js');\r\n/**\r\n * Configure map on creation.\r\n *\r\n * @function Map.config\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - Ray's congfiguration options. May include:\r\n * - {object} object - Mapped game object\r\n * - {string} [type] - Map type. If not defined, will be determined from object\r\n * - {boolean} [dynamic] = false - If set true, map will be dynamic (updated on scene update event).\r\n * - {integer} [segmentCount] = 0 - Circle map's segment count. If set to 0, map won't be generating segments and relay only on generated tangent point to actually testing ray.\r\n * - {boolean} [active] = true - If set true, map will be active (will provide points, segments and will be updated).\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function config(options) {\r\n    this.object = options.object;\r\n    //object type\r\n    if(options.type === undefined)\r\n        options.type = options.object.type;\r\n    this.type = options.type;\r\n    \r\n    switch(options.type) {\r\n        case 'Polygon':\r\n            this.getPoints = polygon.getPoints;\r\n            this.getSegments = polygon.getSegments;\r\n            this.updateMap = polygon.updateMap;\r\n            break;\r\n        case 'Arc':\r\n            //circle segments count\r\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\r\n            this.getPoints = arc.getPoints;\r\n            this.getSegments = arc.getSegments;\r\n            this.updateMap = arc.updateMap;\r\n            this.setSegmentCount = segmentCount.setSegmentCount;\r\n            break;\r\n        case 'Line':\r\n            this.getPoints = line.getPoints;\r\n            this.getSegments = line.getSegments;\r\n            this.updateMap = line.updateMap;\r\n            break;\r\n        case 'Container':\r\n            this.getPoints = container.getPoints;\r\n            this.getSegments = container.getSegments;\r\n            this.updateMap = container.updateMap;\r\n            break;\r\n        case 'StaticTilemapLayer':\r\n            //ray colliding tiles\r\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\r\n            this.getPoints = tilemap.getPoints;\r\n            this.getSegments = tilemap.getSegments;\r\n            this.updateMap = tilemap.updateMap;\r\n            this.setCollisionTiles = tilemap.setCollisionTiles;\r\n            //reset tilemap origin\r\n            this.object.setOrigin(0,0);\r\n            break;\r\n        case 'DynamicTilemapLayer':\r\n            //ray colliding tiles\r\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\r\n            this.getPoints = tilemap.getPoints;\r\n            this.getSegments = tilemap.getSegments;\r\n            this.updateMap = tilemap.updateMap;\r\n            this.setCollisionTiles = tilemap.setCollisionTiles;\r\n            //reset tilemap origin\r\n            this.object.setOrigin(0,0);\r\n            break;\r\n        default:\r\n            this.getPoints = rectangle.getPoints;\r\n            this.getSegments = rectangle.getSegments;\r\n            this.updateMap = rectangle.updateMap;\r\n    }\r\n\r\n    //dynamic map\r\n    this.dynamic = (options.dynamic == true) ? true : false;\r\n\r\n    //enable/disable map\r\n    this.active = (options.active !== undefined) ? options.active : true;\r\n\r\n    return this;\r\n}\r\n","/*Map methods for rectangles*/\r\n/**\r\n * Get array of rectangle's points.\r\n *\r\n * @function Map._getRectanglePoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing rectangle.\r\n *\r\n * @function Map._getRectangleSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update rectangle's map of points and segments.\r\n *\r\n * @function Map._updateRectangleMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n        \r\n    let points = [];\r\n    let segments = [];\r\n\r\n    //set points\r\n    points = [\r\n        this.object.getTopLeft(),\r\n        this.object.getTopRight(),\r\n        this.object.getBottomRight(),\r\n        this.object.getBottomLeft()\r\n    ];\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n        else\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/*Map methods for lines*/\r\n/**\r\n * Get array of points for line.\r\n *\r\n * @function Map._getLinePoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing line.\r\n *\r\n * @function Map._getLineSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update line's map of points and segments.\r\n *\r\n * @function Map._updateLineMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n    let pointA = this.object.geom.getPointA();\r\n    let pointB = this.object.geom.getPointB();\r\n\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\r\n        pointA = vectorA.getPointB();\r\n\r\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\r\n        pointB = vectorB.getPointB();\r\n\r\n        //set points\r\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\r\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\r\n        //set segment\r\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        //set points\r\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\r\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\r\n        //set segment\r\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\r\n    }\r\n    \r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n    return this;\r\n};\r\n","/*Map methods for polygons*/\r\n/**\r\n * Get array of polygon's points.\r\n *\r\n * @function Map._getPolygonPoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing polygon.\r\n *\r\n * @function Map._getPolygonSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update polygon's map of points and segments.\r\n *\r\n * @function Map._updatePolygonMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n    //set points\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        for(let point of this.object.geom.points) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            points.push(vector.getPointB());\r\n        }\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        for(let point of this.object.geom.points) {\r\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\r\n        }\r\n    }\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \r\n    }\r\n    //if polygon is closed\r\n    if(this.object.closePath) {\r\n        let last = points.length - 1;\r\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/*Map methods for circles*/\r\n/**\r\n * Get array of points on circle.\r\n *\r\n * @function Map._getArcPoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object. Used to generate points of rays tangent to circle, from ray origin.\r\n *\r\n * @return {array} Array of Phaser.GeomLine objects.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    if(this._points.length > 0)\r\n        return this._points;\r\n    \r\n    let points = [];\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\r\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\r\n\r\n    //calculate tangent rays\r\n    if(ray) {\r\n        let rayA = new Phaser.Geom.Line();\r\n        let rayB = new Phaser.Geom.Line();\r\n        let c;\r\n        \r\n        let rotation = this.object.rotation;\r\n        \r\n        if(rotation !== 0) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            let cB = vector.getPointB();\r\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\r\n        }\r\n        else { \r\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\r\n        }\r\n\r\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\r\n\r\n        //ray angle\r\n        let angle = Phaser.Geom.Line.Angle(c);\r\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\r\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\r\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\r\n\r\n        //adding tangent points\r\n        points.push(rayA.getPointB());\r\n        points.push(rayB.getPointB());\r\n    }\r\n\r\n    return points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing circle.\r\n *\r\n * @function Map._getArcSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update circle's map of points and segments. If segmentCount == 0. Map is generated dynamically by calculating points of rays tangent to circle, from ray origin.\r\n *\r\n * @function Map._updateArcMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    if(!this.segmentCount) {\r\n        this._points = [];\r\n        this._segments = [];\r\n        return this;\r\n    }\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\r\n\r\n    //get points surrounding circle\r\n    let points = this.object.geom.getPoints(this.segmentCount);\r\n    let segments = []\r\n\r\n    //set points\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        let newPoints = [];\r\n        for(let point of points) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            newPoints.push(vector.getPointB());\r\n        }\r\n        points = newPoints;\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        for(let point of points) {\r\n            point.x = point.x * this.object.scaleX + offset.x;\r\n            point.y = point.y * this.object.scaleY + offset.y;\r\n        }\r\n    }\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n        else\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n    return this;\r\n};\r\n","/**\n * Set segment count for cirle's map.\n *\n * @function Map.setSegmentCount\n * @since 0.6.0\n *\n * @param {integer} [count] - Circle's map segments count.\n *\n * @return {object} Map object.\n */\nexport function setSegmentCount(count) {\n    this.segmentCount = count;\n        this.updateMap();\n        return this;\n}\n","/*Map methods for containers*/\r\n/**\r\n * Get array of container's children points.\r\n *\r\n * @function Map._getContainerPoints\r\n * @since 0.7.1\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false, getCircles = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    let points = [];\r\n    if(!getCircles)\r\n        points = this._points;\r\n    //calculate offset based on container position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n\r\n    //get tangent points of container's circles\r\n    if(ray){\r\n        //create temporary ray\r\n        let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n\r\n        let tempRay = ray._raycaster.createRay({\r\n            origin: {\r\n                x: vector.getPointB().x,\r\n                y: vector.getPointB().y\r\n            }\r\n        });\r\n\r\n        for(let child of this.object.list){\r\n            if(child.type === 'Arc'){\r\n\r\n                let map = child.data.get('raycasterMap');\r\n                if(map._points.length == 0){\r\n                    for(let point of map.getPoints(tempRay, true)){\r\n                        let vector = new Phaser.Geom.Line(0, 0, point.x, point.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n\r\n                        points.push(new Phaser.Geom.Point(vector.getPointB().x + offset.x, vector.getPointB().y + offset.y));\r\n                    }\r\n                }\r\n            }\r\n            else if(child.type === 'Container') {\r\n                for(let point of child.data.get('raycasterMap').getPoints(tempRay, true)){\r\n                    if(this.object.rotation !== 0) {\r\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n                        points.push(vector.getPointB());\r\n                    }\r\n                    //if rotation === 0\r\n                    else\r\n                        points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing container's children.\r\n *\r\n * @function Map._getContainerSegments\r\n * @since 0.7.1\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update containers's map of points and segments.\r\n *\r\n * @function Map._updateContainerleMap\r\n * @since 0.7.1\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    let container = this.object;\r\n\r\n    //calculate offset based on container position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n\r\n    let rotation = container.rotation;\r\n\r\n    //iterate through container's children\r\n    container.iterate(function(child){\r\n        if(!child.data)\r\n            child.setDataEnabled();\r\n\r\n        //get child map\r\n        let map = child.data.get('raycasterMap');\r\n        if(!map) {\r\n            map = new this.constructor({\r\n                object: child,\r\n                segmentCount: this.segmentCount\r\n            });\r\n            child.data.set('raycasterMap', map);\r\n        }\r\n        else\r\n            map.updateMap();\r\n\r\n        //add child points\r\n        let childPoints = [];\r\n        for(let point of map.getPoints()) {\r\n            //calculate positions after container's rotation\r\n            if(rotation !== 0) {\r\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                points.push(vector.getPointB());\r\n            }\r\n            //if rotation === 0\r\n            else\r\n                points.push(new Phaser.Geom.Point(point.x * container.scaleX + offset.x, point.y * container.scaleX + offset.y));\r\n\r\n            childPoints.push(points[points.length - 1])\r\n        }\r\n\r\n        //add child segments\r\n        for(let segment of map.getSegments()) {\r\n            //calculate positions after container's rotation\r\n            if(rotation !== 0) {\r\n                let pointA = segment.getPointA();\r\n                let pointB = segment.getPointB();\r\n                let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\r\n                let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\r\n                Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\r\n\r\n                segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\r\n            }\r\n            //if rotation === 0\r\n            else\r\n                segments.push(new Phaser.Geom.Line(segment.getPointA().x * container.scaleX + offset.x, segment.getPointA().y * container.scaleY + offset.y, segment.getPointB().x * container.scaleX + offset.x, segment.getPointB().y * container.scaleY + offset.y));\r\n        }\r\n\r\n    }.bind(this));\r\n\r\n    //get children intersections\r\n    for(let i = 0, iLength = container.list.length; i < iLength; i++){\r\n        let childA = container.list[i];\r\n        let mapA = childA.data.get('raycasterMap');\r\n\r\n        for(let j = i+1, jLength = container.list.length; j < jLength; j++){\r\n            let childB = container.list[j];\r\n            let mapB = childB.data.get('raycasterMap');\r\n            //check if bounding boxes overlap\r\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\r\n                continue;\r\n\r\n            //find objects intersections\r\n            for(let segmentA of mapA.getSegments()) {\r\n                for(let segmentB of mapB.getSegments()) {\r\n                    let intersection = [];\r\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\r\n                        continue;\r\n                    \r\n                     //calculate positions after container's rotation\r\n                    if(rotation !== 0) {\r\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, intersection.x * this.object.scaleX + offset.x, intersection.y * this.object.scaleY + offset.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                        points.push(vector.getPointB());\r\n                    }\r\n                    //if rotation === 0\r\n                    else\r\n                        points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/*Map methods for tilemaps*/\n/**\n * Get array of points for tilemap.\n *\n * @function Map._getTilemapPoints\n * @since 0.7.3\n *\n * @param {object} [ray] - Ray object.\n *\n * @return {array} Array of points.\n */\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._points;\n\n    let points = [];\n    for(let point of this._points) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, point.x, point.y) <= ray.detectionRange)\n            points.push(point);\n    }\n\n    //get intersections between tilemap's segments and ray's detection range edge\n    let segments = this.getSegments(ray);\n\n    for(let segment of segments) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x1, segment.y1) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x1, segment.y1));\n        \n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x2, segment.y2) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x2, segment.y2));\n    }\n\n    return points;\n};\n\n/**\n * Get array of segments representing tilemap.\n *\n * @function Map._getTilemapSegments\n * @since 0.7.3\n *\n *\n * @return {array} Array of Phaser.Geom.Line objects.\n */\nexport function getSegments(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._segments;\n\n    let segments = [];\n    for(let segment of this._segments) {\n        if(Phaser.Geom.Intersects.LineToCircle(segment, ray.detectionRangeCircle)) {\n            segments.push(segment);\n        }\n    }\n\n    return segments;\n};\n\n/**\n * Update tilemap's map of points and segments.\n *\n * @function Map._updateTilemapMap\n * @since 0.7.3\n *\n *\n * @return {object} Map object.\n */\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x;\n    offset.y = this.object.y;\n\n    let horizontal = false;\n    let horizontals = [];\n    let verticals = [];\n\n    //iterate rows\n    for(let i = 0, iLength = this.object.layer.data.length; i < iLength; i++) {\n        let row = this.object.layer.data[i];\n\n        //iterate row's tiles\n        for(let j = 0, jLength = row.length; j < jLength; j++) {\n            let tile = row[j];\n\n            //check if tile and its top and left neighbours have different are from different sets (rays blocking and non-bloking)\n            let upperEdge = ((i > 0 && this.collisionTiles.includes(this.object.layer.data[i-1][j].index) != this.collisionTiles.includes(tile.index)) || (i == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n            let leftEdge = ((j > 0 && this.collisionTiles.includes(this.object.layer.data[i][j-1].index) != this.collisionTiles.includes(tile.index)) || (j == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n\n            //get current tile's column last vertical line\n            let vertical = false;\n            if(verticals.length <= j)\n                verticals[j] = [];\n            else if(verticals[j].length > 0)\n                vertical = verticals[j][verticals[j].length - 1];\n\n            //check if tile has edge from left\n            if(leftEdge) {\n                if(vertical && vertical.y + vertical.height == i)\n                    vertical.height++;\n                else {\n                    verticals[j].push({\n                        x: tile.x,\n                        y: tile.y,\n                        height: 1\n                    });\n                }\n            }\n\n            //check if tile has edge from top\n            if(upperEdge) {\n                if(horizontal)\n                    horizontal.width++;\n                else\n                    horizontal = {\n                        x: tile.x,\n                        y: tile.y,\n                        width: 1\n                    };\n                continue;\n            }\n\n            if(horizontal) {\n                let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n                let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n                let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n                segments.push(segment);\n                horizontals.push(segment);\n                points.push(new Phaser.Geom.Point(x, y));\n                points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n                horizontal = false;\n            }\n        }\n        \n        //at the end of row add segment if exist\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add bottom horizontal segments\n    for(let tile of this.object.layer.data[this.object.layer.data.length - 1]) {\n        if(this.collisionTiles.includes(tile.index)) {\n            if(horizontal)\n                horizontal.width++;\n            else\n                horizontal = {\n                    x: tile.x,\n                    y: tile.y + 1,\n                    width: 1\n                };\n            continue;\n        }\n\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add segment if exist\n    if(horizontal) {\n        let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n        let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n        let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n        segments.push(segment);\n        horizontals.push(segment);\n        points.push(new Phaser.Geom.Point(x, y));\n        points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n        horizontal = false;\n    }\n    \n    //add right vertical segments\n    let vertical = false;\n    let verticalsLastColumn = [];\n    for(let row of this.object.layer.data) {\n        let tile = row[row.length - 1];\n\n        //if tile blocks ray\n        if(this.collisionTiles.includes(tile.index)) {\n            if(vertical) {\n                vertical.height++;\n            }\n            else {\n                vertical = {\n                    x: tile.x + 1,\n                    y: tile.y,\n                    height: 1\n                };\n            }\n\n            continue;\n        }\n\n        if(vertical) {\n            verticalsLastColumn.push(vertical);\n            vertical = false;\n        }\n    }\n\n    verticals.push(verticalsLastColumn);\n    \n    //add vertical segments\n    for(let column of verticals) {\n        if(!column)\n            continue;\n\n        for(let vertical of column) {\n            let x = vertical.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y1 = vertical.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let y2 = y1 + this.object.layer.tileHeight * this.object.scaleY * vertical.height;\n            let segment = new Phaser.Geom.Line(x, y1, x, y2)\n            segments.push(segment);\n\n            //add points if they're not already there\n            if(!points.filter(point => point.x == x && point.y == y1))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            if(!points.filter(point => point.x == x && point.y == y2))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            //get intersections between horizontal segments and vertical\n            for(let horizontalSegment of horizontals) {\n                if(segment.x1 == horizontalSegment.x1 || segment.x1 == horizontalSegment.x2 || segment.x2 == horizontalSegment.x1 || segment.x2 == horizontalSegment.x2)\n                    continue;\n\n                if(segment.y1 == horizontalSegment.y1 || segment.y1 == horizontalSegment.y2 || segment.y2 == horizontalSegment.y1 || segment.y2 == horizontalSegment.y2)\n                    continue;\n\n                let point = new Phaser.Geom.Point();\n                if(Phaser.Geom.Intersects.LineToLine(segment, horizontalSegment, point)) {\n                    points.push(point);\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n\n/**\n * Set tilemap's tiles which collide with rays.\n *\n * @function Map.setCollidingTiles\n * @since 0.7.3\n *\n *\n * @return {object} Map object.\n */\nexport function setCollisionTiles(tiles = []) {\n    this.collisionTiles = tiles;\n    return this;\n}\n","/**\r\n * @classdesc\r\n *\r\n * Ray class responible for casting ray's and testing their collisions with mapped objects.\r\n *\r\n * @class Ray\r\n * @memberof Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Ray specific configuration settings.\r\n * @param {Raycaster} [raycaster] - Parent raycaster object.\r\n */\r\nexport function Ray(options, raycaster) {\r\n    this.origin = new Phaser.Geom.Point();\r\n    this._ray = new Phaser.Geom.Line();\r\n    this.angle = 0;\r\n    this.cone = 0;\r\n    this.range = Phaser.Math.MAX_SAFE_INTEGER;\r\n    this.detectionRange = 0;\r\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\r\n    this.ignoreNotIntersectedRays = true;\r\n    this.intersections = [];\r\n    this._raycaster = raycaster ? raycaster : false;\r\n\r\n    this.config(options);\r\n};\r\n\r\nRay.prototype = {\r\n    config: require('./config.js').config,\r\n    setRay: require('./ray.js').setRay,    \r\n    setOrigin: require('./origin.js').setOrigin,\r\n    setRange: require('./range.js').setRange,\r\n    setAngle: require('./angle.js').setAngle,\r\n    setAngleDeg: require('./angle.js').setAngleDeg,\r\n    setCone: require('./cone.js').setCone,\r\n    setConeDeg: require('./cone.js').setConeDeg,\r\n    setDetectionRange: require('./range.js').setDetectionRange,\r\n    boundsInRange: require('./range.js').boundsInRange,\r\n    cast: require('./cast.js').cast,\r\n    castCircle: require('./castCircle.js').castCircle,\r\n    castCone: require('./castCone.js').castCone\r\n};\r\n","/**\n * Configure ray on creation.\n *\n * @function Ray.config\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * - {Phaser.Types.Math.Vector2Like} [origin] = {x:0, y:0} - Ray's position.\n * - {float} [angle] = 0 - Ray's angle in radians.\n * - {float} [angleDeg] = 0 - Ray's angle in degrees.\n * - {float} [cone] = 0 - Ray's cone angle in radians.\n * - {float} [coneDeg] = 0 - Ray's cone angle in degrees.\n * - {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\n * - {integer} [detectionRange] = Phaser.Math.MAX_SAFE_INTEGER - Maximum distance between ray's position and tested objects bounding boxes.\n * - {boolean} [ignoreNotIntersectedRays] = true - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target.\n *\n * @return {object} Ray object.\n */\nexport function config(options) {\n    this.object = options.object;\n    //origin\n    if(options.origin !== undefined)\n        this.origin.setTo(options.origin.x, options.origin.y);\n\n    //angle\n    if(options.angle !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\n\n    //angle deg\n    if(options.angleDeg !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\n\n    //cone angle\n    if(options.cone !== undefined)\n        this.cone = options.cone;\n\n    //cone angle deg\n    if(options.coneDeg !== undefined)\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //range (0 = max)\n    if(options.range !== undefined)\n        this.range = options.range;\n\n    //detection range (0 = max)\n    if(options.detectionRange !== undefined)\n        this.detectionRange = options.detectionRange;\n\n    if(options.ignoreNotIntersectedRays !== undefined)\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\n    \n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n","/**\n * Set ray's position, direction (angle) and range.\n *\n * @function Ray.setAngle\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n * @param {float} [angle] - Ray's angle in radians.\n * @param {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\n *\n * @return {object} Ray object.\n */\nexport function setRay(x, y, angle, range = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.origin.setTo(x, y);\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    this.range = range;\n\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n    return this;\n}\n","/**\n * Set ray's position.\n *\n * @function Ray.setOrigin\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n *\n * @return {object} Ray object.\n */\nexport function setOrigin(x, y) {\n    this.origin.setTo(x, y);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n    return this;\n}\n","/**\n * Cast ray to find closest intersection with tested mapped objects.\n *\n * @function Ray.cast\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\n * - {Phaser.Types.Math.Vector2Like} [target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\n *\n * @return {Phaser.Types.Math.Vector2Like} / {boolean} - Point object of ray's closest intersection with tested objects. Returns false if no intersection has been found.\n */\nexport function cast(options = {}) {\n    let closestIntersection;\n    let closestDistance = this.range;\n    //if bounding box is defined check bounding box intersection\n    if(this._raycaster && this._raycaster.boundingBox) {\n        let intersections = [];\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\n        if(intersections.length === 1)\n            closestIntersection = intersections[0];\n        else if(intersections.length > 1) {\n            for(let intersection of intersections) {\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection;\n                }\n            }\n        }\n        //if ray target is declared\n        else if(options.target){\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\n            //if target is within ray range\n            if(this.range > distance) {\n                closestDistance = distance;\n                closestIntersection = options.target;\n            }\n        }\n    }\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n    \n    for(let object of options.objects) {\n        //check if object is intersected by ray\n        if(!Phaser.Geom.Intersects.GetLineToRectangle(this._ray, object.getBounds()))\n            continue;\n\n        let map = object.data.get('raycasterMap');\n        \n        //check intersections\n        for(let segment of map.getSegments(this)) {\n            let intersection = [];\n\n            //if target point is segmemt point\n            if(options.target) {\n                if(\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\n                ) {\n                    intersection = options.target;\n                }\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n                    continue;\n            }\n            //if no intersection continue\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n              continue;\n            \n            //get closest intersection\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n            if(distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n            }\n        }\n\n        //check arc intersections if its not\n        if(map.type === 'Arc') {\n           //if arc has generated points (besides tangent points to ray)\n            if(map._points.length > 0) {\n                continue;\n            }\n            \n            //check if target point is a circle tangent point to ray\n            if(options.target) {\n                let points = map.getPoints(this);\n                let isTangent = false;\n                for(let point of points) {\n\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = point;\n                            isTangent = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(isTangent)\n                    continue;\n            }\n\n            let circleIntersections = [];\n            let offset = new Phaser.Geom.Point();\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\n\n            //calculate circle's center after rotation\n            let rotation = map.object.rotation;\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                let cB = vector.getPointB();\n                offset.x = cB.x;\n                offset.y = cB.y;\n            }\n\n            //create transformed circle\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\n\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                for(let intersection of circleIntersections) {\n                    //get closest intersection\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                    if(distance < closestDistance) {\n\n                        closestDistance = distance;\n                        closestIntersection = intersection;\n                    }\n                }\n            }\n        }\n    }\n\n    if(!closestIntersection)\n        return (this.ignoreNotIntersectedRays) ? false : this._ray.getPointB();\n    return new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\n}\n","/**\n * Cast ray in all directions to find closest intersections with tested mapped objects.\n *\n * @function Ray.castCircle\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\n *\n * @return {array} - Array of Point objects of ray's closest intersections with tested objects.\n */\nexport function castCircle(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n\n        //if bounding box is defined add bounding box points to \n        if(this._raycaster && this._raycaster.boundingBox) {\n            for(let point of this._raycaster.boundingBox.points) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n                });\n            }\n        }\n\n        for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n            let object = options.objects[i];\n            //if bound in range\n            if(!this.boundsInRange(object))\n                continue;\n            \n            testedObjects.push(object);\n\n            let map = object.data.get('raycasterMap');\n            maps.push(map);\n            //get points and angles\n            for(let point of map.getPoints(this)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n                });\n            }\n\n            //get objects intersections\n            for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n                let objectB = options.objects[j];\n                let mapB = objectB.data.get('raycasterMap');\n                //check if bounding boxes overlap\n                if(!Phaser.Geom.Intersects.RectangleToRectangle(object.getBounds(), objectB.getBounds()))\n                    continue;\n                \n                //find objects intersections\n                for(let segmentA of map.getSegments(this)) {\n                    for(let segmentB of mapB.getSegments(this)) {\n                        let intersection = [];\n                        if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                            continue;\n                        \n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\n                        });\n                    }\n                }\n            }\n        }\n\n        //sort target points by angle\n        rayTargets.sort(function(a, b){\n            //if rays towards points have the same angles promote closer one\n            if(a.angle == b.angle) {\n                if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) < Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                    return 1;\n                else\n                    return -1;\n            }\n\n            return a.angle - b.angle;\n        }.bind(this));\n\n        //cast rays\n        for(let target of rayTargets){\n            this.setAngle(target.angle);\n            let intersection = this.cast({\n                objects: testedObjects,\n                target: target.point\n            });\n            if(intersection){\n                //if intersection hits target point cast two additional rays\n                if(Phaser.Geom.Point.Equals(target.point, intersection)) {\n                    this.setAngle(target.angle - 0.0001);\n                    let intersectionA = this.cast({\n                        objects: testedObjects\n                    });\n                    if(intersectionA)\n                        intersections.push(intersectionA);\n                    \n                    intersections.push(intersection);\n\n                    this.setAngle(target.angle + 0.0001);\n                    let intersectionB = this.cast({\n                        objects: testedObjects\n                    });\n                    if(intersectionB)\n                        intersections.push(intersectionB);\n\n                    continue;\n                }\n                intersections.push(intersection);\n            }\n        }\n    }\n\n    this.setAngle(originalAngle);\n    return intersections;\n}\n","/**\n * Cast ray in cone to find closest intersections with tested mapped objects.\n *\n * @function Ray.castCone\n * @since 0.7.0\n *\n * @param {object} [options] - options that may include:\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\n *\n * @return {array} - Array of Point objects of ray's closest intersections with tested objects.\n */\nexport function castCone(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let cone = this.cone;\n    let minAngle = 0;\n    let maxAngle = 0;\n    let angleOffset = 0;\n\n    //set cone\n    if(options.cone !== undefined)\n        cone = options.cone;\n    if(options.coneDeg !== undefined)\n        cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //set cone min and max angle\n    minAngle = this.angle - cone / 2;\n    maxAngle = this.angle + cone / 2;\n\n    //add min and max angle points\n    this.setAngle(minAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: minAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\n    });\n\n    this.setAngle(maxAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: maxAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\n    });\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n\n        //if bounding box is defined add bounding box points to \n        if(this._raycaster && this._raycaster.boundingBox) {\n            for(let point of this._raycaster.boundingBox.points) {\n\n                let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n                let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                    rayTargets.push({\n                        point: point,\n                        angle: angle,\n                        angleOffsetDeg: -angleOffsetDeg\n                    });\n                }\n            }\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map = object.data.get('raycasterMap');\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB = objectB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(object.getBounds(), objectB.getBounds()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\n                            angleOffsetDeg: -angleOffsetDeg\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) < Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angleOffsetDeg - b.angleOffsetDeg;\n    }.bind(this));\n\n    //cast rays\n    for(let target of rayTargets){\n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point\n        });\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            if(Phaser.Geom.Point.Equals(target.point, intersection)) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects\n                });\n                if(intersectionA)\n                    intersections.push(intersectionA);\n                \n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects\n                });\n                if(intersectionB)\n                    intersections.push(intersectionB);\n\n                continue;\n            }\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    return intersections;\n}\n"],"sourceRoot":""}