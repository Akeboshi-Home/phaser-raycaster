{"version":3,"sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/raycaster-core.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setRange","range","Phaser","Math","MAX_SAFE_INTEGER","this","Geom","Line","SetToAngle","_ray","origin","x","y","angle","setDetectionRange","detectionRange","detectionRangeCircle","setTo","boundsInRange","objectBounds","bounds","getBounds","Intersects","CircleToRectangle","setAngle","Angle","Normalize","setAngleDeg","DegToRad","setCone","cone","setConeDeg","PhaserRaycaster","scene","systems","sys","settings","isBooted","events","once","boot","register","PluginManager","eventEmitter","on","start","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","destroy","test","console","log","time","delta","undefined","createRaycaster","options","_Raycaster","constructor","require","Raycaster","version","graphics","boundingBox","mappedObjects","sortedPoints","mapSegmentCount","physics","world","setOptions","autoUpdate","add","lineStyle","width","color","fillStyle","objects","mapGameObjects","setBoundingBox","height","rectangle","Rectangle","points","segments","Point","left","top","right","bottom","length","push","dynamic","segmentCount","Array","isArray","includes","data","setDataEnabled","map","Map","set","removeMappedObjects","index","indexOf","splice","enableMaps","active","disableMaps","mapppedObject","updateMap","createRay","Ray","type","_points","_segments","getPoints","getSegments","getIntersections","config","line","polygon","arc","container","setSegmentCount","_getRectanglePoints","_getRectangleSegments","_updateRectangleMap","_getLinePoints","_getLineSegments","_updateLineMap","_getPolygonPoints","_getPolygonSegments","_updatePolygonMap","_getArcPoints","_getArcSegments","_updateArcMap","_getContainerPoints","_getContainerSegments","_updateContainerMap","getTopLeft","getTopRight","getBottomRight","getBottomLeft","offset","displayWidth","originX","displayHeight","originY","pointA","geom","getPointA","pointB","getPointB","rotation","vectorA","scaleX","scaleY","Length","vectorB","point","vector","closePath","last","ray","rayA","rayB","cB","rayLength","sqrt","pow","radius","dAngle","asin","newPoints","getCircles","tempRay","_raycaster","list","child","iterate","childPoints","segment","iLength","childA","mapA","j","jLength","childB","mapB","RectangleToRectangle","segmentA","segmentB","intersection","LineToLine","count","raycaster","Circle","ignoreNotIntersectedRays","intersections","setRay","setOrigin","cast","castCircle","castCone","angleDeg","coneDeg","closestIntersection","closestDistance","GetLineToRectangle","distance","Distance","Between","target","Equals","isTangent","circleIntersections","circle","GetLineToCircle","x1","y1","originalAngle","maps","rayTargets","testedObjects","objectB","sort","a","b","intersectionA","intersectionB","minAngle","maxAngle","angleOffsetDeg","RadToDeg","ShortestBetween","abs"],"mappings":"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","file":"phaser-raycaster.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\r\n * Set ray's range.\r\n *\r\n * @function Ray.setRange\r\n * @since 0.6.0\r\n *\r\n * @param {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setRange(range = Phaser.Math.MAX_SAFE_INTEGER) {\r\n    this.range = range;\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Set ray's range.\r\n *\r\n * @function Ray.setRange\r\n * @since 0.6.0\r\n *\r\n * @param {integer} [detectionRange] = Phaser.Math.MAX_SAFE_INTEGER - Maximum distance between ray's position and tested objects bounding boxes.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setDetectionRange(detectionRange = 0) {\r\n    this.detectionRange = detectionRange;\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Test if object's bounding box is in ray's detection range.\r\n *\r\n * @function Ray.boundsInRange\r\n * @since 0.6.0\r\n *\r\n * @param {object} object - Tested object\r\n * @param {Phaser.Geom. Rectangle} / {boolean} [bounds] = false - Tested object's bounds. If not passed bounds will be generated.\r\n *\r\n * @return {boolean} Information if object is in ray's detection range.\r\n */\r\nexport function boundsInRange(object, bounds = false) {\r\n    if(!this.detectionRange)\r\n        return true;\r\n\r\n    let objectBounds;\r\n    if(bounds)\r\n        objectBounds = bounds;\r\n    else\r\n        objectBounds = object.getBounds();\r\n\r\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\r\n        return true;\r\n\r\n    return false;\r\n}\r\n","/**\r\n * Set ray angle in radians.\r\n *\r\n * @function Ray.setAngle\r\n * @since 0.6.0\r\n *\r\n * @param {float} [angle] - Ray's angle in radians.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setAngle(angle = 0) {\r\n    this.angle = Phaser.Math.Angle.Normalize(angle);\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Set ray angle in degrees.\r\n *\r\n * @function Ray.setAngleDeg\r\n * @since 0.6.1\r\n *\r\n * @param {float} [angle] - Ray's angle in degrees.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setAngleDeg(angle = 0) {\r\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    return this;\r\n}\r\n","/**\r\n * Set ray's cone angle in radians.\r\n *\r\n * @function Ray.setAngle\r\n * @since 0.7.0\r\n *\r\n * @param {float} [cone] - Ray's cone angle in radians.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setCone(cone = 0) {\r\n    this.cone = cone;\r\n    return this;\r\n}\r\n\r\n/**\r\n * Set ray's cone angle in degrees.\r\n *\r\n * @function Ray.setAngleDeg\r\n * @since 0.7.0\r\n *\r\n * @param {float} [cone] - Ray's cone angle in degrees.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setConeDeg(cone = 0) {\r\n    this.cone = Phaser.Math.DegToRad(cone);\r\n    return this;\r\n}\r\n","var PhaserRaycaster = function (scene)\r\n{\r\n    //The Scene that owns this plugin\r\n    this.scene = scene;\r\n\r\n    this.systems = scene.sys;\r\n\r\n    if (!scene.sys.settings.isBooted)\r\n    {\r\n        scene.sys.events.once('boot', this.boot, this);\r\n    }\r\n};\r\n\r\n//Static function called by the PluginFile Loader.\r\nPhaserRaycaster.register = function (PluginManager)\r\n{\r\n    //  Register this plugin with the PluginManager, so it can be added to Scenes.\r\n\r\n    //  The first argument is the name this plugin will be known as in the PluginManager. It should not conflict with already registered plugins.\r\n    //  The second argument is a reference to the plugin object, which will be instantiated by the PluginManager when the Scene boots.\r\n    //  The third argument is the local mapping. This will make the plugin available under `this.sys.base` and also `this.base` from a Scene if\r\n    //  it has an entry in the InjectionMap.\r\n    PluginManager.register('PhaserRaycaster', PhaserRaycaster, 'base');\r\n};\r\n\r\nPhaserRaycaster.prototype = {\r\n\r\n    //  Called when the Plugin is booted by the PluginManager.\r\n    //  If you need to reference other systems in the Scene (like the Loader or DisplayList) then set-up those references now, not in the constructor.\r\n    boot: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\r\n        //  If you don't need any of these events then remove the listeners and the relevant methods too.\r\n\r\n        eventEmitter.on('start', this.start, this);\r\n\r\n        eventEmitter.on('preupdate', this.preUpdate, this);\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.on('postupdate', this.postUpdate, this);\r\n\r\n        eventEmitter.on('pause', this.pause, this);\r\n        eventEmitter.on('resume', this.resume, this);\r\n\r\n        eventEmitter.on('sleep', this.sleep, this);\r\n        eventEmitter.on('wake', this.wake, this);\r\n\r\n        eventEmitter.on('shutdown', this.shutdown, this);\r\n        eventEmitter.on('destroy', this.destroy, this);\r\n    },\r\n\r\n    //A test method.\r\n    test: function (name)\r\n    {\r\n        console.log('RaycasterPlugin says hello ' + name + '!');\r\n    },\r\n\r\n    //Called when a Scene is started by the SceneManager. The Scene is now active, visible and running.\r\n    start: function ()\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 1\r\n    preUpdate: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 2\r\n    update: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 3\r\n    postUpdate: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\r\n    pause: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is resumed from a paused state.\r\n    resume: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\r\n    sleep: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is woken from a sleeping state.\r\n    wake: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\r\n    shutdown: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is destroyed by the Scene Manager. There is no coming back from a destroyed Scene, so clear up all resources here.\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene = undefined;\r\n    },\r\n\r\n    //Create Raycaster object\r\n    createRaycaster: function(options = {}) {\r\n        options.scene = this.scene;\r\n        return new this._Raycaster(options);\r\n    }\r\n\r\n};\r\n\r\nPhaserRaycaster.prototype.constructor = PhaserRaycaster;\r\nPhaserRaycaster.prototype._Raycaster = require('./raycaster-core.js').Raycaster;\r\n\r\n//Make sure you export the plugin for webpack to expose\r\n\r\nmodule.exports = PhaserRaycaster;\r\n","/**\r\n* @author       Marcin Walczak <mail@marcinwalczak.pl>\r\n* @copyright    2020 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responible for creating ray objects and managing mapped objects.\r\n *\r\n * @class Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Ray specific configuration settings.\r\n */\r\nexport function Raycaster(options) {\r\n    this.version = '0.7.2';\r\n    this.scene;\r\n    this.graphics;\r\n    this.boundingBox = false;\r\n    this.mappedObjects = [];\r\n    this.sortedPoints = [];\r\n    this.mapSegmentCount = 0;   //quantity of segments of map of circle\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined && options.scene.physics !== undefined)\r\n            options.boundingBox = options.scene.physics.world.bounds;\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update.bind(this));\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update.bind(this));\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    //set options\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n        }\r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    //set bounding box\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    //map object\r\n    mapGameObjects: function(objects, dynamic = false, segmentCount = this.mapSegmentCount) {\r\n        if(!Array.isArray(objects)) {\r\n            if(this.mappedObjects.includes(objects))\r\n                return this;\r\n\r\n            if(!objects.data)\r\n                objects.setDataEnabled();\r\n\r\n            let map = new this.Map({\r\n                object: objects,\r\n                dynamic: dynamic,\r\n                segmentCount: segmentCount\r\n            });\r\n\r\n            objects.data.set('raycasterMap', map);\r\n            this.mappedObjects.push(objects);\r\n\r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            if(!object.data)\r\n                object.setDataEnabled();\r\n\r\n            let map = new this.Map({\r\n                object: object,\r\n                dynamic: dynamic,\r\n                segmentCount: segmentCount\r\n            });\r\n\r\n            object.data.set('raycasterMap', map);\r\n            this.mappedObjects.push(object);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    //remove mapped Objects\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            let index = this.mappedObjects.indexOf(objects);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1)\r\n            return this;\r\n        }\r\n\r\n        for(let object of objects) {\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1)\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //enable maps\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            if(objects.data) {\r\n                let map = objects.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = true;\r\n            }\r\n                \r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(object.data) {\r\n                let map = object.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = true;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //disable maps\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            if(objects.data) {\r\n                let map = objects.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = false;\r\n            }\r\n                \r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(object.data) {\r\n                let map = object.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = false;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //scene update event listener\r\n    update: function() {\r\n        //update dynamic maps\r\n        if(this.mappedObjects.length > 0)\r\n            for(let mapppedObject of this.mappedObjects) {\r\n                if(mapppedObject.data === undefined)\r\n                    continue;\r\n\r\n                let map = mapppedObject.data.get('raycasterMap')\r\n                if(map.dynamic)\r\n                    map.updateMap();\r\n            }\r\n    },\r\n\r\n    //ray factory\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n","/**\r\n * @classdesc\r\n *\r\n * Map class responible for mapping game objects.\r\n *\r\n * @class Map\r\n * @memberof Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Map specific configuration settings.\r\n * @param {Raycaster} [raycaster] - Parent raycaster object.\r\n */\r\nexport function Map(options) {\r\n    this.type;\r\n    this.active;\r\n    this.dynamic;\r\n    this.object;\r\n    this._points = [];\r\n    this._segments = [];\r\n    this.getPoints;\r\n    this.getSegments;\r\n    this.getIntersections;\r\n    this.segmentCount = 0;\r\n\r\n    this.config(options);\r\n    this.updateMap();\r\n\r\n    return this;\r\n};\r\n\r\nlet rectangle = require('./map-rectangle-methods.js');\r\nlet line = require('./map-line-methods.js');\r\nlet polygon = require('./map-polygon-methods.js');\r\nlet arc = require('./map-circle-methods.js');\r\nlet container = require('./map-container-methods.js');\r\n\r\nMap.prototype = {\r\n    config: require('./config.js').config,\r\n    setSegmentCount: require('./segmentsCount.js').setSegmentCount,\r\n    //methods for rectangle maps\r\n    _getRectanglePoints: rectangle.getPoints,\r\n    _getRectangleSegments: rectangle.getSegments,\r\n    _updateRectangleMap: rectangle.updateMap,\r\n    //methods for line maps\r\n    _getLinePoints: line.getPoints,\r\n    _getLineSegments: line.getSegments,\r\n    _updateLineMap: line.updateMap,\r\n    //methods for polygon maps\r\n    _getPolygonPoints: polygon.getPoints,\r\n    _getPolygonSegments: polygon.getSegments,\r\n    _updatePolygonMap: polygon.updateMap,\r\n    //methods for circle maps\r\n    _getArcPoints: arc.getPoints,\r\n    _getArcSegments: arc.getSegments,\r\n    _updateArcMap: arc.updateMap,\r\n    //methods for container maps\r\n    _getContainerPoints: container.getPoints,\r\n    _getContainerSegments: container.getSegments,\r\n    _updateContainerMap: container.updateMap\r\n};\r\n\r\nMap.prototype.constructor = Map;\r\n","/*Map methods for rectangles*/\r\n/**\r\n * Get array of rectangle's points.\r\n *\r\n * @function Map._getRectanglePoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing rectangle.\r\n *\r\n * @function Map._getRectangleSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update rectangle's map of points and segments.\r\n *\r\n * @function Map._updateRectangleMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n        \r\n    let points = [];\r\n    let segments = [];\r\n\r\n    //set points\r\n    points = [\r\n        this.object.getTopLeft(),\r\n        this.object.getTopRight(),\r\n        this.object.getBottomRight(),\r\n        this.object.getBottomLeft()\r\n    ];\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n        else\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/*Map methods for lines*/\r\n/**\r\n * Get array of points for line.\r\n *\r\n * @function Map._getLinePoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing line.\r\n *\r\n * @function Map._getLineSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update line's map of points and segments.\r\n *\r\n * @function Map._updateLineMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n    let pointA = this.object.geom.getPointA();\r\n    let pointB = this.object.geom.getPointB();\r\n\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\r\n        pointA = vectorA.getPointB();\r\n\r\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\r\n        pointB = vectorB.getPointB();\r\n\r\n        //set points\r\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\r\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\r\n        //set segment\r\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        //set points\r\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\r\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\r\n        //set segment\r\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\r\n    }\r\n    \r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n    return this;\r\n};\r\n","/*Map methods for polygons*/\r\n/**\r\n * Get array of polygon's points.\r\n *\r\n * @function Map._getPolygonPoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing polygon.\r\n *\r\n * @function Map._getPolygonSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update polygon's map of points and segments.\r\n *\r\n * @function Map._updatePolygonMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n    //set points\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        for(let point of this.object.geom.points) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            points.push(vector.getPointB());\r\n        }\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        for(let point of this.object.geom.points) {\r\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\r\n        }\r\n    }\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \r\n    }\r\n    //if polygon is closed\r\n    if(this.object.closePath) {\r\n        let last = points.length - 1;\r\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/*Map methods for circles*/\r\n/**\r\n * Get array of points on circle.\r\n *\r\n * @function Map._getArcPoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object. Used to generate points of rays tangent to circle, from ray origin.\r\n *\r\n * @return {array} Array of Phaser.GeomLine objects.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    if(this._points.length > 0)\r\n        return this._points;\r\n    \r\n    let points = [];\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\r\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\r\n\r\n    //calculate tangent rays\r\n    if(ray) {\r\n        let rayA = new Phaser.Geom.Line();\r\n        let rayB = new Phaser.Geom.Line();\r\n        let c;\r\n        \r\n        let rotation = this.object.rotation;\r\n        \r\n        if(rotation !== 0) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            let cB = vector.getPointB();\r\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\r\n        }\r\n        else { \r\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\r\n        }\r\n\r\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\r\n\r\n        //ray angle\r\n        let angle = Phaser.Geom.Line.Angle(c);\r\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\r\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\r\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\r\n\r\n        //adding tangent points\r\n        points.push(rayA.getPointB());\r\n        points.push(rayB.getPointB());\r\n    }\r\n\r\n    return points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing circle.\r\n *\r\n * @function Map._getArcSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update circle's map of points and segments. If segmentCount == 0. Map is generated dynamically by calculating points of rays tangent to circle, from ray origin.\r\n *\r\n * @function Map._updateArcMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    if(!this.segmentCount) {\r\n        this._points = [];\r\n        this._segments = [];\r\n        return this;\r\n    }\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\r\n\r\n    //get points surrounding circle\r\n    let points = this.object.geom.getPoints(this.segmentCount);\r\n    let segments = []\r\n\r\n    //set points\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        let newPoints = [];\r\n        for(let point of points) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            newPoints.push(vector.getPointB());\r\n        }\r\n        points = newPoints;\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        for(let point of points) {\r\n            point.x = point.x * this.object.scaleX + offset.x;\r\n            point.y = point.y * this.object.scaleY + offset.y;\r\n        }\r\n    }\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n        else\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n    return this;\r\n};\r\n","/*Map methods for containers*/\r\n/**\r\n * Get array of container's children points.\r\n *\r\n * @function Map._getContainerPoints\r\n * @since 0.7.1\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false, getCircles = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    let points = [];\r\n    if(!getCircles)\r\n        points = this._points;\r\n    //calculate offset based on container position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n\r\n    //get tangent points of container's circles\r\n    if(ray){\r\n        //create temporary ray\r\n        let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n\r\n        let tempRay = ray._raycaster.createRay({\r\n            origin: {\r\n                x: vector.getPointB().x,\r\n                y: vector.getPointB().y\r\n            }\r\n        });\r\n\r\n        for(let child of this.object.list){\r\n            if(child.type === 'Arc'){\r\n\r\n                let map = child.data.get('raycasterMap');\r\n                if(map._points.length == 0){\r\n                    for(let point of map.getPoints(tempRay, true)){\r\n                        let vector = new Phaser.Geom.Line(0, 0, point.x, point.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n\r\n                        points.push(new Phaser.Geom.Point(vector.getPointB().x + offset.x, vector.getPointB().y + offset.y));\r\n                    }\r\n                }\r\n            }\r\n            else if(child.type === 'Container') {\r\n                for(let point of child.data.get('raycasterMap').getPoints(tempRay, true)){\r\n                    if(this.object.rotation !== 0) {\r\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n                        points.push(vector.getPointB());\r\n                    }\r\n                    //if rotation === 0\r\n                    else\r\n                        points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing container's children.\r\n *\r\n * @function Map._getContainerSegments\r\n * @since 0.7.1\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update containers's map of points and segments.\r\n *\r\n * @function Map._updateContainerleMap\r\n * @since 0.7.1\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    let container = this.object;\r\n\r\n    //calculate offset based on container position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n\r\n    let rotation = container.rotation;\r\n\r\n    //iterate through container's children\r\n    container.iterate(function(child){\r\n        if(!child.data)\r\n            child.setDataEnabled();\r\n\r\n        //get child map\r\n        let map = child.data.get('raycasterMap');\r\n        if(!map) {\r\n            map = new this.constructor({\r\n                object: child,\r\n                segmentCount: this.segmentCount\r\n            });\r\n            child.data.set('raycasterMap', map);\r\n        }\r\n        else\r\n            map.updateMap();\r\n\r\n        //add child points\r\n        let childPoints = [];\r\n        for(let point of map.getPoints()) {\r\n            //calculate positions after container's rotation\r\n            if(rotation !== 0) {\r\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                points.push(vector.getPointB());\r\n            }\r\n            //if rotation === 0\r\n            else\r\n                points.push(new Phaser.Geom.Point(point.x * container.scaleX + offset.x, point.y * container.scaleX + offset.y));\r\n\r\n            childPoints.push(points[points.length - 1])\r\n        }\r\n\r\n        //add child segments\r\n        for(let segment of map.getSegments()) {\r\n            //calculate positions after container's rotation\r\n            if(rotation !== 0) {\r\n                let pointA = segment.getPointA();\r\n                let pointB = segment.getPointB();\r\n                let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\r\n                let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\r\n                Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\r\n\r\n                segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\r\n            }\r\n            //if rotation === 0\r\n            else\r\n                segments.push(new Phaser.Geom.Line(segment.getPointA().x * container.scaleX + offset.x, segment.getPointA().y * container.scaleY + offset.y, segment.getPointB().x * container.scaleX + offset.x, segment.getPointB().y * container.scaleY + offset.y));\r\n        }\r\n\r\n    }.bind(this));\r\n\r\n    //get children intersections\r\n    for(let i = 0, iLength = container.list.length; i < iLength; i++){\r\n        let childA = container.list[i];\r\n        let mapA = childA.data.get('raycasterMap');\r\n\r\n        for(let j = i+1, jLength = container.list.length; j < jLength; j++){\r\n            let childB = container.list[j];\r\n            let mapB = childB.data.get('raycasterMap');\r\n            //check if bounding boxes overlap\r\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\r\n                continue;\r\n\r\n            //find objects intersections\r\n            for(let segmentA of mapA.getSegments()) {\r\n                for(let segmentB of mapB.getSegments()) {\r\n                    let intersection = [];\r\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\r\n                        continue;\r\n                    \r\n                     //calculate positions after container's rotation\r\n                    if(rotation !== 0) {\r\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, intersection.x * this.object.scaleX + offset.x, intersection.y * this.object.scaleY + offset.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                        points.push(vector.getPointB());\r\n                    }\r\n                    //if rotation === 0\r\n                    else\r\n                        points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/**\r\n * Configure map on creation.\r\n *\r\n * @function Map.config\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - Ray's congfiguration options. May include:\r\n * - {object} object - Mapped game object\r\n * - {string} [type] - Map type. If not defined, will be determined from object\r\n * - {boolean} [dynamic] = false - If set true, map will be dynamic (updated on scene update event).\r\n * - {integer} [segmentCount] = 0 - Circle map's segment count. If set to 0, map won't be generating segments and relay only on generated tangent point to actually testing ray.\r\n * - {boolean} [active] = true - If set true, map will be active (will provide points, segments and will be updated).\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function config(options) {\r\n    this.object = options.object;\r\n    //object type\r\n    if(options.type === undefined)\r\n        options.type = options.object.type;\r\n    this.type = options.type;\r\n\r\n    switch(options.type) {\r\n        case 'Polygon':\r\n            this.getPoints = this._getPolygonPoints;\r\n            this.getSegments = this._getPolygonSegments;\r\n            this.updateMap = this._updatePolygonMap;\r\n            break;\r\n        case 'Arc':\r\n            this.getPoints = this._getArcPoints;\r\n            this.getSegments = this._getArcSegments;\r\n            this.updateMap = this._updateArcMap;\r\n            break;\r\n        case 'Line':\r\n            this.getPoints = this._getLinePoints;\r\n            this.getSegments = this._getLineSegments;\r\n            this.updateMap = this._updateLineMap;\r\n            break;\r\n        case 'Container':\r\n            this.getPoints = this._getContainerPoints;\r\n            this.getSegments = this._getContainerSegments;\r\n            this.updateMap = this._updateContainerMap;\r\n            break;\r\n        default:\r\n            this.getPoints = this._getRectanglePoints;\r\n            this.getSegments = this._getRectangleSegments;\r\n            this.updateMap = this._updateRectangleMap;\r\n    }\r\n\r\n    //dynamic map\r\n    this.dynamic = (options.dynamic == true) ? true : false;\r\n    //circle segments count\r\n    this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\r\n    //enable/disable map\r\n    this.active = (options.active !== undefined) ? options.active : true;\r\n\r\n    return this;\r\n}\r\n","/**\r\n * Set segment count for cirle's map.\r\n *\r\n * @function Map.setSegmentCount\r\n * @since 0.6.0\r\n *\r\n * @param {integer} [count] - Circle's map segments count.\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function setSegmentCount(count) {\r\n    this.segmentCount = count;\r\n        this.updateMap();\r\n        return this;\r\n}\r\n","/**\r\n * @classdesc\r\n *\r\n * Ray class responible for casting ray's and testing their collisions with mapped objects.\r\n *\r\n * @class Ray\r\n * @memberof Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Ray specific configuration settings.\r\n * @param {Raycaster} [raycaster] - Parent raycaster object.\r\n */\r\nexport function Ray(options, raycaster) {\r\n    this.origin = new Phaser.Geom.Point();\r\n    this._ray = new Phaser.Geom.Line();\r\n    this.angle = 0;\r\n    this.cone = 0;\r\n    this.range = Phaser.Math.MAX_SAFE_INTEGER;\r\n    this.detectionRange = 0;\r\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\r\n    this.ignoreNotIntersectedRays = true;\r\n    this.intersections = [];\r\n    this._raycaster = raycaster ? raycaster : false;\r\n\r\n    this.config(options);\r\n};\r\n\r\nRay.prototype = {\r\n    config: require('./config.js').config,\r\n    setRay: require('./ray.js').setRay,    \r\n    setOrigin: require('./origin.js').setOrigin,\r\n    setRange: require('./range.js').setRange,\r\n    setAngle: require('./angle.js').setAngle,\r\n    setAngleDeg: require('./angle.js').setAngleDeg,\r\n    setCone: require('./cone.js').setCone,\r\n    setConeDeg: require('./cone.js').setConeDeg,\r\n    setDetectionRange: require('./range.js').setDetectionRange,\r\n    boundsInRange: require('./range.js').boundsInRange,\r\n    cast: require('./cast.js').cast,\r\n    castCircle: require('./castCircle.js').castCircle,\r\n    castCone: require('./castCone.js').castCone\r\n};\r\n","/**\r\n * Configure ray on creation.\r\n *\r\n * @function Ray.config\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - Ray's congfiguration options. May include:\r\n * - {Phaser.Types.Math.Vector2Like} [origin] = {x:0, y:0} - Ray's position.\r\n * - {float} [angle] = 0 - Ray's angle in radians.\r\n * - {float} [angleDeg] = 0 - Ray's angle in degrees.\r\n * - {float} [cone] = 0 - Ray's cone angle in radians.\r\n * - {float} [coneDeg] = 0 - Ray's cone angle in degrees.\r\n * - {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\r\n * - {integer} [detectionRange] = Phaser.Math.MAX_SAFE_INTEGER - Maximum distance between ray's position and tested objects bounding boxes.\r\n * - {boolean} [ignoreNotIntersectedRays] = true - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function config(options) {\r\n    this.object = options.object;\r\n    //origin\r\n    if(options.origin)\r\n        this.origin.setTo(options.origin.x, options.origin.y);\r\n\r\n    //angle\r\n    if(options.angle)\r\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\r\n\r\n    //angle deg\r\n    if(options.angleDeg)\r\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\r\n\r\n    //cone angle\r\n    if(options.cone)\r\n        this.cone = options.cone;\r\n\r\n    //cone angle deg\r\n    if(options.coneDeg)\r\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\r\n\r\n    //range (0 = max)\r\n    if(options.range)\r\n        this.range = options.range;\r\n\r\n    //detection range (0 = max)\r\n    if(options.detectionRange)\r\n        this.detectionRange = options.detectionRange;\r\n\r\n    if(options.ignoreNotIntersectedRays !== undefined)\r\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\r\n    \r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n\r\n    return this;\r\n}\r\n","/**\r\n * Set ray's position, direction (angle) and range.\r\n *\r\n * @function Ray.setAngle\r\n * @since 0.6.0\r\n *\r\n * @param {integer} x - X coordinate.\r\n * @param {integer} y - Y coordinate.\r\n * @param {float} [angle] - Ray's angle in radians.\r\n * @param {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setRay(x, y, angle, range = Phaser.Math.MAX_SAFE_INTEGER) {\r\n    this.origin.setTo(x, y);\r\n    this.angle = Phaser.Math.Angle.Normalize(angle);\r\n    this.range = range;\r\n\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n    return this;\r\n}\r\n","/**\r\n * Set ray's position.\r\n *\r\n * @function Ray.setOrigin\r\n * @since 0.6.0\r\n *\r\n * @param {integer} x - X coordinate.\r\n * @param {integer} y - Y coordinate.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setOrigin(x, y) {\r\n    this.origin.setTo(x, y);\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n    return this;\r\n}\r\n","/**\r\n * Cast ray to find closest intersection with tested mapped objects.\r\n *\r\n * @function Ray.cast\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - options that may include:\r\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\r\n * - {Phaser.Types.Math.Vector2Like} [target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\r\n *\r\n * @return {Phaser.Types.Math.Vector2Like} / {boolean} - Point object of ray's closest intersection with tested objects. Returns false if no intersection has been found.\r\n */\r\nexport function cast(options = {}) {\r\n    let closestIntersection;\r\n    let closestDistance = this.range;\r\n    //if bounding box is defined check bounding box intersection\r\n    if(this._raycaster && this._raycaster.boundingBox) {\r\n        let intersections = [];\r\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\r\n        if(intersections.length === 1)\r\n            closestIntersection = intersections[0];\r\n        else if(intersections.length > 1) {\r\n            for(let intersection of intersections) {\r\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\r\n                if(distance < closestDistance) {\r\n                    closestDistance = distance;\r\n                    closestIntersection = intersection;\r\n                }\r\n            }\r\n        }\r\n        //if ray target is declared\r\n        else if(options.target){\r\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\r\n            //if target is within ray range\r\n            if(this.range > distance) {\r\n                closestDistance = distance;\r\n                closestIntersection = options.target;\r\n            }\r\n        }\r\n    }\r\n\r\n    //if no objects to cast ray were passed, use raycasters mapped objects\r\n    if(!options.objects) {\r\n        if(this._raycaster)\r\n            options.objects = this._raycaster.mappedObjects;\r\n        else\r\n            return intersections;\r\n    }\r\n    \r\n    for(let object of options.objects) {\r\n        //check if object is intersected by ray\r\n        if(!Phaser.Geom.Intersects.GetLineToRectangle(this._ray, object.getBounds()))\r\n            continue;\r\n\r\n        let map = object.data.get('raycasterMap');\r\n        \r\n        //check intersections\r\n        for(let segment of map.getSegments(this)) {\r\n            let intersection = [];\r\n\r\n            //if target point is segmemt point\r\n            if(options.target) {\r\n                if(\r\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\r\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\r\n                ) {\r\n                    intersection = options.target;\r\n                }\r\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\r\n                    continue;\r\n            }\r\n            //if no intersection continue\r\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\r\n              continue;\r\n            \r\n            //get closest intersection\r\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\r\n            if(distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestIntersection = intersection;\r\n            }\r\n        }\r\n\r\n        //check arc intersections if its not\r\n        if(map.type === 'Arc') {\r\n           //if arc has generated points (besides tangent points to ray)\r\n            if(map._points.length > 0) {\r\n                continue;\r\n            }\r\n            \r\n            //check if target point is a circle tangent point to ray\r\n            if(options.target) {\r\n                let points = map.getPoints(this);\r\n                let isTangent = false;\r\n                for(let point of points) {\r\n\r\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\r\n                        //get closest intersection\r\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\r\n\r\n                        if(distance < closestDistance) {\r\n                            closestDistance = distance;\r\n                            closestIntersection = point;\r\n                            isTangent = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(isTangent)\r\n                    continue;\r\n            }\r\n\r\n            let circleIntersections = [];\r\n            let offset = new Phaser.Geom.Point();\r\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\r\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\r\n\r\n            //calculate circle's center after rotation\r\n            let rotation = map.object.rotation;\r\n            if(rotation !== 0) {\r\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                let cB = vector.getPointB();\r\n                offset.x = cB.x;\r\n                offset.y = cB.y;\r\n            }\r\n\r\n            //create transformed circle\r\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\r\n\r\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\r\n                for(let intersection of circleIntersections) {\r\n                    //get closest intersection\r\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\r\n\r\n                    if(distance < closestDistance) {\r\n\r\n                        closestDistance = distance;\r\n                        closestIntersection = intersection;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!closestIntersection)\r\n        return (this.ignoreNotIntersectedRays) ? false : this._ray.getPointB();\r\n    return new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\r\n}\r\n","/**\r\n * Cast ray in all directions to find closest intersections with tested mapped objects.\r\n *\r\n * @function Ray.castCircle\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - options that may include:\r\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\r\n *\r\n * @return {array} - Array of Point objects of ray's closest intersections with tested objects.\r\n */\r\nexport function castCircle(options = {}) {\r\n    let originalAngle = this.angle;\r\n    let intersections = [];\r\n    let maps = [];\r\n    let rayTargets = [];\r\n    let testedObjects = [];\r\n\r\n    //if no objects to cast ray were passed, use raycasters mapped objects\r\n    if(!options.objects) {\r\n        if(this._raycaster)\r\n            options.objects = this._raycaster.mappedObjects;\r\n        else\r\n            return intersections;\r\n\r\n        //if bounding box is defined add bounding box points to \r\n        if(this._raycaster && this._raycaster.boundingBox) {\r\n            for(let point of this._raycaster.boundingBox.points) {\r\n                rayTargets.push({\r\n                    point: point,\r\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\r\n                });\r\n            }\r\n        }\r\n\r\n        for(let i=0, iLength = options.objects.length; i < iLength; i++) {\r\n            let object = options.objects[i];\r\n            //if bound in range\r\n            if(!this.boundsInRange(object))\r\n                continue;\r\n            \r\n            testedObjects.push(object);\r\n\r\n            let map = object.data.get('raycasterMap');\r\n            maps.push(map);\r\n            //get points and angles\r\n            for(let point of map.getPoints(this)) {\r\n                rayTargets.push({\r\n                    point: point,\r\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\r\n                });\r\n            }\r\n\r\n            //get objects intersections\r\n            for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\r\n                let objectB = options.objects[j];\r\n                let mapB = objectB.data.get('raycasterMap');\r\n                //check if bounding boxes overlap\r\n                if(!Phaser.Geom.Intersects.RectangleToRectangle(object.getBounds(), objectB.getBounds()))\r\n                    continue;\r\n                \r\n                //find objects intersections\r\n                for(let segmentA of map.getSegments(this)) {\r\n                    for(let segmentB of mapB.getSegments(this)) {\r\n                        let intersection = [];\r\n                        if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\r\n                            continue;\r\n                        \r\n                        rayTargets.push({\r\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\r\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //sort target points by angle\r\n        rayTargets.sort(function(a, b){\r\n            //if rays towards points have the same angles promote closer one\r\n            if(a.angle == b.angle) {\r\n                if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) < Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\r\n                    return 1;\r\n                else\r\n                    return -1;\r\n            }\r\n\r\n            return a.angle - b.angle;\r\n        }.bind(this));\r\n\r\n        //cast rays\r\n        for(let target of rayTargets){\r\n            this.setAngle(target.angle);\r\n            let intersection = this.cast({\r\n                objects: testedObjects,\r\n                target: target.point\r\n            });\r\n            if(intersection){\r\n                //if intersection hits target point cast two additional rays\r\n                if(Phaser.Geom.Point.Equals(target.point, intersection)) {\r\n                    this.setAngle(target.angle - 0.0001);\r\n                    let intersectionA = this.cast({\r\n                        objects: testedObjects\r\n                    });\r\n                    if(intersectionA)\r\n                        intersections.push(intersectionA);\r\n                    \r\n                    intersections.push(intersection);\r\n\r\n                    this.setAngle(target.angle + 0.0001);\r\n                    let intersectionB = this.cast({\r\n                        objects: testedObjects\r\n                    });\r\n                    if(intersectionB)\r\n                        intersections.push(intersectionB);\r\n\r\n                    continue;\r\n                }\r\n                intersections.push(intersection);\r\n            }\r\n        }\r\n    }\r\n\r\n    this.setAngle(originalAngle);\r\n    return intersections;\r\n}\r\n","/**\r\n * Cast ray in cone to find closest intersections with tested mapped objects.\r\n *\r\n * @function Ray.castCone\r\n * @since 0.7.0\r\n *\r\n * @param {object} [options] - options that may include:\r\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\r\n *\r\n * @return {array} - Array of Point objects of ray's closest intersections with tested objects.\r\n */\r\nexport function castCone(options = {}) {\r\n    let originalAngle = this.angle;\r\n    let intersections = [];\r\n    let maps = [];\r\n    let rayTargets = [];\r\n    let testedObjects = [];\r\n    let cone = this.cone;\r\n    let minAngle = 0;\r\n    let maxAngle = 0;\r\n    let angleOffset = 0;\r\n\r\n    //set cone\r\n    if(options.cone !== undefined)\r\n        cone = options.cone;\r\n    if(options.coneDeg !== undefined)\r\n        cone = Phaser.Math.DegToRad(options.coneDeg);\r\n\r\n    //set cone min and max angle\r\n    minAngle = this.angle - cone / 2;\r\n    maxAngle = this.angle + cone / 2;\r\n\r\n    //add min and max angle points\r\n    this.setAngle(minAngle);\r\n    rayTargets.push({\r\n        point: this._ray.getPointB(),\r\n        angle: minAngle,\r\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\r\n    });\r\n\r\n    this.setAngle(maxAngle);\r\n    rayTargets.push({\r\n        point: this._ray.getPointB(),\r\n        angle: maxAngle,\r\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\r\n    });\r\n\r\n    //if no objects to cast ray were passed, use raycasters mapped objects\r\n    if(!options.objects) {\r\n        if(this._raycaster)\r\n            options.objects = this._raycaster.mappedObjects;\r\n        else\r\n            return intersections;\r\n\r\n        //if bounding box is defined add bounding box points to \r\n        if(this._raycaster && this._raycaster.boundingBox) {\r\n            for(let point of this._raycaster.boundingBox.points) {\r\n\r\n                let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\r\n                let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\r\n\r\n                if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\r\n                    rayTargets.push({\r\n                        point: point,\r\n                        angle: angle,\r\n                        angleOffsetDeg: -angleOffsetDeg\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\r\n        let object = options.objects[i];\r\n        //if bound in range\r\n        if(!this.boundsInRange(object))\r\n            continue;\r\n        \r\n        testedObjects.push(object);\r\n\r\n        let map = object.data.get('raycasterMap');\r\n        maps.push(map);\r\n        //get points and angles\r\n        for(let point of map.getPoints(this)) {\r\n\r\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\r\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\r\n\r\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\r\n                rayTargets.push({\r\n                    point: point,\r\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\r\n                    angleOffsetDeg: -angleOffsetDeg\r\n                });\r\n            }\r\n        }\r\n\r\n        //get objects intersections\r\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\r\n            let objectB = options.objects[j];\r\n            let mapB = objectB.data.get('raycasterMap');\r\n            //check if bounding boxes overlap\r\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(object.getBounds(), objectB.getBounds()))\r\n                continue;\r\n            \r\n            //find objects intersections\r\n            for(let segmentA of map.getSegments(this)) {\r\n                for(let segmentB of mapB.getSegments(this)) {\r\n                    let intersection = [];\r\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\r\n                        continue;\r\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\r\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\r\n\r\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\r\n                        rayTargets.push({\r\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\r\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\r\n                            angleOffsetDeg: -angleOffsetDeg\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //sort target points by angle\r\n    rayTargets.sort(function(a, b){\r\n        //if rays towards points have the same angles promote closer one\r\n        if(a.angle == b.angle) {\r\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) < Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\r\n                return 1;\r\n            else\r\n                return -1;\r\n        }\r\n\r\n        return a.angleOffsetDeg - b.angleOffsetDeg;\r\n    }.bind(this));\r\n\r\n    //cast rays\r\n    for(let target of rayTargets){\r\n        this.setAngle(target.angle);\r\n        let intersection = this.cast({\r\n            objects: testedObjects,\r\n            target: target.point\r\n        });\r\n        if(intersection){\r\n            //if intersection hits target point cast two additional rays\r\n            if(Phaser.Geom.Point.Equals(target.point, intersection)) {\r\n                this.setAngle(target.angle - 0.0001);\r\n                let intersectionA = this.cast({\r\n                    objects: testedObjects\r\n                });\r\n                if(intersectionA)\r\n                    intersections.push(intersectionA);\r\n                \r\n                intersections.push(intersection);\r\n\r\n                this.setAngle(target.angle + 0.0001);\r\n                let intersectionB = this.cast({\r\n                    objects: testedObjects\r\n                });\r\n                if(intersectionB)\r\n                    intersections.push(intersectionB);\r\n\r\n                continue;\r\n            }\r\n            intersections.push(intersection);\r\n        }\r\n    }\r\n\r\n    this.setAngle(originalAngle);\r\n    return intersections;\r\n}\r\n"],"sourceRoot":""}