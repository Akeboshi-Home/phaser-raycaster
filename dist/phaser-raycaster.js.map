{"version":3,"sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/raycaster-core.js"],"names":["PhaserRaycaster","scene","systems","sys","settings","isBooted","events","once","boot","register","PluginManager","prototype","eventEmitter","on","start","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","destroy","test","name","console","log","time","delta","undefined","createRaycaster","options","_Raycaster","constructor","require","Raycaster","module","exports","config","object","type","getPoints","_getPolygonPoints","getSegments","_getPolygonSegments","updateMap","_updatePolygonMap","_getArcPoints","_getArcSegments","_updateArcMap","_getLinePoints","_getLineSegments","_updateLineMap","_getContainerPoints","_getContainerSegments","_updateContainerMap","_getRectanglePoints","_getRectangleSegments","_updateRectangleMap","dynamic","segmentCount","active","ray","_points","length","points","offset","Phaser","Geom","Point","x","displayWidth","originX","y","displayHeight","originY","rayA","Line","rayB","c","rotation","vector","SetToAngle","Angle","Length","cB","getPointB","origin","rayLength","Math","sqrt","pow","radius","scaleX","angle","dAngle","asin","push","_segments","scaleY","geom","segments","newPoints","point","i","getCircles","tempRay","_raycaster","createRay","list","child","map","data","get","container","iterate","setDataEnabled","set","childPoints","segment","pointA","getPointA","pointB","vectorA","vectorB","bind","iLength","childA","mapA","j","jLength","childB","mapB","Intersects","RectangleToRectangle","getBounds","segmentA","segmentB","intersection","LineToLine","Map","getIntersections","rectangle","line","polygon","arc","setSegmentCount","closePath","last","getTopLeft","getTopRight","getBottomRight","getBottomLeft","count","setAngle","Normalize","_ray","range","setAngleDeg","DegToRad","cast","closestIntersection","closestDistance","boundingBox","intersections","GetLineToRectangle","distance","Distance","Between","target","objects","mappedObjects","Equals","isTangent","circleIntersections","circle","Circle","GetLineToCircle","x1","y1","ignoreNotIntersectedRays","castCircle","originalAngle","maps","rayTargets","testedObjects","boundsInRange","objectB","sort","a","b","intersectionA","intersectionB","castCone","cone","minAngle","maxAngle","angleOffset","coneDeg","angleOffsetDeg","RadToDeg","ShortestBetween","abs","setCone","setConeDeg","setTo","angleDeg","detectionRange","detectionRangeCircle","setOrigin","setRange","MAX_SAFE_INTEGER","setDetectionRange","bounds","objectBounds","CircleToRectangle","Ray","raycaster","setRay","version","graphics","sortedPoints","mapSegmentCount","physics","world","setOptions","autoUpdate","add","lineStyle","width","color","fillStyle","mapGameObjects","setBoundingBox","height","Rectangle","left","top","right","bottom","Array","isArray","includes","removeMappedObjects","index","indexOf","splice","enableMaps","disableMaps","mapppedObject"],"mappings":"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","file":"phaser-raycaster.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","var PhaserRaycaster = function (scene)\r\n{\r\n    //The Scene that owns this plugin\r\n    this.scene = scene;\r\n\r\n    this.systems = scene.sys;\r\n\r\n    if (!scene.sys.settings.isBooted)\r\n    {\r\n        scene.sys.events.once('boot', this.boot, this);\r\n    }\r\n};\r\n\r\n//Static function called by the PluginFile Loader.\r\nPhaserRaycaster.register = function (PluginManager)\r\n{\r\n    //  Register this plugin with the PluginManager, so it can be added to Scenes.\r\n\r\n    //  The first argument is the name this plugin will be known as in the PluginManager. It should not conflict with already registered plugins.\r\n    //  The second argument is a reference to the plugin object, which will be instantiated by the PluginManager when the Scene boots.\r\n    //  The third argument is the local mapping. This will make the plugin available under `this.sys.base` and also `this.base` from a Scene if\r\n    //  it has an entry in the InjectionMap.\r\n    PluginManager.register('PhaserRaycaster', PhaserRaycaster, 'base');\r\n};\r\n\r\nPhaserRaycaster.prototype = {\r\n\r\n    //  Called when the Plugin is booted by the PluginManager.\r\n    //  If you need to reference other systems in the Scene (like the Loader or DisplayList) then set-up those references now, not in the constructor.\r\n    boot: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\r\n        //  If you don't need any of these events then remove the listeners and the relevant methods too.\r\n\r\n        eventEmitter.on('start', this.start, this);\r\n\r\n        eventEmitter.on('preupdate', this.preUpdate, this);\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.on('postupdate', this.postUpdate, this);\r\n\r\n        eventEmitter.on('pause', this.pause, this);\r\n        eventEmitter.on('resume', this.resume, this);\r\n\r\n        eventEmitter.on('sleep', this.sleep, this);\r\n        eventEmitter.on('wake', this.wake, this);\r\n\r\n        eventEmitter.on('shutdown', this.shutdown, this);\r\n        eventEmitter.on('destroy', this.destroy, this);\r\n    },\r\n\r\n    //A test method.\r\n    test: function (name)\r\n    {\r\n        console.log('RaycasterPlugin says hello ' + name + '!');\r\n    },\r\n\r\n    //Called when a Scene is started by the SceneManager. The Scene is now active, visible and running.\r\n    start: function ()\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 1\r\n    preUpdate: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 2\r\n    update: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called every Scene step - phase 3\r\n    postUpdate: function (time, delta)\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\r\n    pause: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is resumed from a paused state.\r\n    resume: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\r\n    sleep: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is woken from a sleeping state.\r\n    wake: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\r\n    shutdown: function ()\r\n    {\r\n    },\r\n\r\n    //Called when a Scene is destroyed by the Scene Manager. There is no coming back from a destroyed Scene, so clear up all resources here.\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene = undefined;\r\n    },\r\n\r\n    //Create Raycaster object\r\n    createRaycaster: function(options = {}) {\r\n        options.scene = this.scene;\r\n        return new this._Raycaster(options);\r\n    }\r\n\r\n};\r\n\r\nPhaserRaycaster.prototype.constructor = PhaserRaycaster;\r\nPhaserRaycaster.prototype._Raycaster = require('./raycaster-core.js').Raycaster;\r\n\r\n//Make sure you export the plugin for webpack to expose\r\n\r\nmodule.exports = PhaserRaycaster;\r\n","/**\r\n * Configure map on creation.\r\n *\r\n * @function Map.config\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - Ray's congfiguration options. May include:\r\n * - {object} object - Mapped game object\r\n * - {string} [type] - Map type. If not defined, will be determined from object\r\n * - {boolean} [dynamic] = false - If set true, map will be dynamic (updated on scene update event).\r\n * - {integer} [segmentCount] = 0 - Circle map's segment count. If set to 0, map won't be generating segments and relay only on generated tangent point to actually testing ray.\r\n * - {boolean} [active] = true - If set true, map will be active (will provide points, segments and will be updated).\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function config(options) {\r\n    this.object = options.object;\r\n    //object type\r\n    if(options.type === undefined)\r\n        options.type = options.object.type;\r\n    this.type = options.type;\r\n\r\n    switch(options.type) {\r\n        case 'Polygon':\r\n            this.getPoints = this._getPolygonPoints;\r\n            this.getSegments = this._getPolygonSegments;\r\n            this.updateMap = this._updatePolygonMap;\r\n            break;\r\n        case 'Arc':\r\n            this.getPoints = this._getArcPoints;\r\n            this.getSegments = this._getArcSegments;\r\n            this.updateMap = this._updateArcMap;\r\n            break;\r\n        case 'Line':\r\n            this.getPoints = this._getLinePoints;\r\n            this.getSegments = this._getLineSegments;\r\n            this.updateMap = this._updateLineMap;\r\n            break;\r\n        case 'Container':\r\n            this.getPoints = this._getContainerPoints;\r\n            this.getSegments = this._getContainerSegments;\r\n            this.updateMap = this._updateContainerMap;\r\n            break;\r\n        default:\r\n            this.getPoints = this._getRectanglePoints;\r\n            this.getSegments = this._getRectangleSegments;\r\n            this.updateMap = this._updateRectangleMap;\r\n    }\r\n\r\n    //dynamic map\r\n    this.dynamic = (options.dynamic == true) ? true : false;\r\n    //circle segments count\r\n    this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\r\n    //enable/disable map\r\n    this.active = (options.active !== undefined) ? options.active : true;\r\n\r\n    return this;\r\n}\r\n","/*Map methods for circles*/\r\n/**\r\n * Get array of points on circle.\r\n *\r\n * @function Map._getArcPoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object. Used to generate points of rays tangent to circle, from ray origin.\r\n *\r\n * @return {array} Array of Phaser.GeomLine objects.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    if(this._points.length > 0)\r\n        return this._points;\r\n    \r\n    let points = [];\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\r\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\r\n\r\n    //calculate tangent rays\r\n    if(ray) {\r\n        let rayA = new Phaser.Geom.Line();\r\n        let rayB = new Phaser.Geom.Line();\r\n        let c;\r\n        \r\n        let rotation = this.object.rotation;\r\n        \r\n        if(rotation !== 0) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            let cB = vector.getPointB();\r\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\r\n        }\r\n        else { \r\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\r\n        }\r\n\r\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\r\n\r\n        //ray angle\r\n        let angle = Phaser.Geom.Line.Angle(c);\r\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\r\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\r\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\r\n\r\n        //adding tangent points\r\n        points.push(rayA.getPointB());\r\n        points.push(rayB.getPointB());\r\n    }\r\n\r\n    return points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing circle.\r\n *\r\n * @function Map._getArcSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update circle's map of points and segments. If segmentCount == 0. Map is generated dynamically by calculating points of rays tangent to circle, from ray origin.\r\n *\r\n * @function Map._updateArcMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    if(!this.segmentCount) {\r\n        this._points = [];\r\n        this._segments = [];\r\n        return this;\r\n    }\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\r\n\r\n    //get points surrounding circle\r\n    let points = this.object.geom.getPoints(this.segmentCount);\r\n    let segments = []\r\n\r\n    //set points\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        let newPoints = [];\r\n        for(let point of points) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            newPoints.push(vector.getPointB());\r\n        }\r\n        points = newPoints;\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        for(let point of points) {\r\n            point.x = point.x * this.object.scaleX + offset.x;\r\n            point.y = point.y * this.object.scaleY + offset.y;\r\n        }\r\n    }\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n        else\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n    return this;\r\n};\r\n","/*Map methods for containers*/\r\n/**\r\n * Get array of container's children points.\r\n *\r\n * @function Map._getContainerPoints\r\n * @since 0.7.1\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false, getCircles = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    let points = [];\r\n    if(!getCircles)\r\n        points = this._points;\r\n    //calculate offset based on container position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n\r\n    //get tangent points of container's circles\r\n    if(ray){\r\n        //create temporary ray\r\n        let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n\r\n        let tempRay = ray._raycaster.createRay({\r\n            origin: {\r\n                x: vector.getPointB().x,\r\n                y: vector.getPointB().y\r\n            }\r\n        });\r\n\r\n        for(let child of this.object.list){\r\n            if(child.type === 'Arc'){\r\n\r\n                let map = child.data.get('raycasterMap');\r\n                if(map._points.length == 0){\r\n                    for(let point of map.getPoints(tempRay, true)){\r\n                        let vector = new Phaser.Geom.Line(0, 0, point.x, point.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n\r\n                        points.push(new Phaser.Geom.Point(vector.getPointB().x + offset.x, vector.getPointB().y + offset.y));\r\n                    }\r\n                }\r\n            }\r\n            else if(child.type === 'Container') {\r\n                for(let point of child.data.get('raycasterMap').getPoints(tempRay, true)){\r\n                    if(this.object.rotation !== 0) {\r\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\r\n                        points.push(vector.getPointB());\r\n                    }\r\n                    //if rotation === 0\r\n                    else\r\n                        points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing container's children.\r\n *\r\n * @function Map._getContainerSegments\r\n * @since 0.7.1\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update containers's map of points and segments.\r\n *\r\n * @function Map._updateContainerleMap\r\n * @since 0.7.1\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    let container = this.object;\r\n\r\n    //calculate offset based on container position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n\r\n    let rotation = container.rotation;\r\n\r\n    //iterate through container's children\r\n    container.iterate(function(child){\r\n        if(!child.data)\r\n            child.setDataEnabled();\r\n\r\n        //get child map\r\n        let map = child.data.get('raycasterMap');\r\n        if(!map) {\r\n            map = new this.constructor({\r\n                object: child,\r\n                segmentCount: this.segmentCount\r\n            });\r\n            child.data.set('raycasterMap', map);\r\n        }\r\n        else\r\n            map.updateMap();\r\n\r\n        //add child points\r\n        let childPoints = [];\r\n        for(let point of map.getPoints()) {\r\n            //calculate positions after container's rotation\r\n            if(rotation !== 0) {\r\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                points.push(vector.getPointB());\r\n            }\r\n            //if rotation === 0\r\n            else\r\n                points.push(new Phaser.Geom.Point(point.x * container.scaleX + offset.x, point.y * container.scaleX + offset.y));\r\n\r\n            childPoints.push(points[points.length - 1])\r\n        }\r\n\r\n        //add child segments\r\n        for(let segment of map.getSegments()) {\r\n            //calculate positions after container's rotation\r\n            if(rotation !== 0) {\r\n                let pointA = segment.getPointA();\r\n                let pointB = segment.getPointB();\r\n                let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\r\n                let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\r\n                Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\r\n\r\n                segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\r\n            }\r\n            //if rotation === 0\r\n            else\r\n                segments.push(new Phaser.Geom.Line(segment.getPointA().x * container.scaleX + offset.x, segment.getPointA().y * container.scaleY + offset.y, segment.getPointB().x * container.scaleX + offset.x, segment.getPointB().y * container.scaleY + offset.y));\r\n        }\r\n\r\n    }.bind(this));\r\n\r\n    //get children intersections\r\n    for(let i = 0, iLength = container.list.length; i < iLength; i++){\r\n        let childA = container.list[i];\r\n        let mapA = childA.data.get('raycasterMap');\r\n\r\n        for(let j = i+1, jLength = container.list.length; j < jLength; j++){\r\n            let childB = container.list[j];\r\n            let mapB = childB.data.get('raycasterMap');\r\n            //check if bounding boxes overlap\r\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\r\n                continue;\r\n\r\n            //find objects intersections\r\n            for(let segmentA of mapA.getSegments()) {\r\n                for(let segmentB of mapB.getSegments()) {\r\n                    let intersection = [];\r\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\r\n                        continue;\r\n                    \r\n                     //calculate positions after container's rotation\r\n                    if(rotation !== 0) {\r\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, intersection.x * this.object.scaleX + offset.x, intersection.y * this.object.scaleY + offset.y);\r\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                        points.push(vector.getPointB());\r\n                    }\r\n                    //if rotation === 0\r\n                    else\r\n                        points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/**\r\n * @classdesc\r\n *\r\n * Map class responible for mapping game objects.\r\n *\r\n * @class Map\r\n * @memberof Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Map specific configuration settings.\r\n * @param {Raycaster} [raycaster] - Parent raycaster object.\r\n */\r\nexport function Map(options) {\r\n    this.type;\r\n    this.active;\r\n    this.dynamic;\r\n    this.object;\r\n    this._points = [];\r\n    this._segments = [];\r\n    this.getPoints;\r\n    this.getSegments;\r\n    this.getIntersections;\r\n    this.segmentCount = 0;\r\n\r\n    this.config(options);\r\n    this.updateMap();\r\n\r\n    return this;\r\n};\r\n\r\nlet rectangle = require('./map-rectangle-methods.js');\r\nlet line = require('./map-line-methods.js');\r\nlet polygon = require('./map-polygon-methods.js');\r\nlet arc = require('./map-circle-methods.js');\r\nlet container = require('./map-container-methods.js');\r\n\r\nMap.prototype = {\r\n    config: require('./config.js').config,\r\n    setSegmentCount: require('./segmentsCount.js').setSegmentCount,\r\n    //methods for rectangle maps\r\n    _getRectanglePoints: rectangle.getPoints,\r\n    _getRectangleSegments: rectangle.getSegments,\r\n    _updateRectangleMap: rectangle.updateMap,\r\n    //methods for line maps\r\n    _getLinePoints: line.getPoints,\r\n    _getLineSegments: line.getSegments,\r\n    _updateLineMap: line.updateMap,\r\n    //methods for polygon maps\r\n    _getPolygonPoints: polygon.getPoints,\r\n    _getPolygonSegments: polygon.getSegments,\r\n    _updatePolygonMap: polygon.updateMap,\r\n    //methods for circle maps\r\n    _getArcPoints: arc.getPoints,\r\n    _getArcSegments: arc.getSegments,\r\n    _updateArcMap: arc.updateMap,\r\n    //methods for container maps\r\n    _getContainerPoints: container.getPoints,\r\n    _getContainerSegments: container.getSegments,\r\n    _updateContainerMap: container.updateMap\r\n};\r\n\r\nMap.prototype.constructor = Map;\r\n","/*Map methods for lines*/\r\n/**\r\n * Get array of points for line.\r\n *\r\n * @function Map._getLinePoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing line.\r\n *\r\n * @function Map._getLineSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update line's map of points and segments.\r\n *\r\n * @function Map._updateLineMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n    let pointA = this.object.geom.getPointA();\r\n    let pointB = this.object.geom.getPointB();\r\n\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\r\n        pointA = vectorA.getPointB();\r\n\r\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\r\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\r\n        pointB = vectorB.getPointB();\r\n\r\n        //set points\r\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\r\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\r\n        //set segment\r\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        //set points\r\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\r\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\r\n        //set segment\r\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\r\n    }\r\n    \r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n    return this;\r\n};\r\n","/*Map methods for polygons*/\r\n/**\r\n * Get array of polygon's points.\r\n *\r\n * @function Map._getPolygonPoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing polygon.\r\n *\r\n * @function Map._getPolygonSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update polygon's map of points and segments.\r\n *\r\n * @function Map._updatePolygonMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n\r\n    let points = [];\r\n    let segments = [];\r\n    \r\n    //calculate offset based on object position and origin point\r\n    let offset = new Phaser.Geom.Point();\r\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\r\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\r\n    //set points\r\n    //calculate positions after object's rotation\r\n    let rotation = this.object.rotation;\r\n    if(rotation !== 0) {\r\n        for(let point of this.object.geom.points) {\r\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\r\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n            points.push(vector.getPointB());\r\n        }\r\n    }\r\n    //if rotation === 0\r\n    else {\r\n        for(let point of this.object.geom.points) {\r\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\r\n        }\r\n    }\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \r\n    }\r\n    //if polygon is closed\r\n    if(this.object.closePath) {\r\n        let last = points.length - 1;\r\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/*Map methods for rectangles*/\r\n/**\r\n * Get array of rectangle's points.\r\n *\r\n * @function Map._getRectanglePoints\r\n * @since 0.6.0\r\n *\r\n * @param {object} [ray] - Ray object.\r\n *\r\n * @return {array} Array of points.\r\n */\r\nexport function getPoints(ray = false) {\r\n    if(!this.active)\r\n        return [];\r\n    return this._points;\r\n};\r\n\r\n/**\r\n * Get array of segments representing rectangle.\r\n *\r\n * @function Map._getRectangleSegments\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {array} Array of Phaser.Geom.Line objects.\r\n */\r\nexport function getSegments() {\r\n    if(!this.active)\r\n        return [];\r\n    return this._segments;\r\n};\r\n\r\n/**\r\n * Update rectangle's map of points and segments.\r\n *\r\n * @function Map._updateRectangleMap\r\n * @since 0.6.0\r\n *\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function updateMap() {\r\n    if(!this.active)\r\n        return this;\r\n        \r\n    let points = [];\r\n    let segments = [];\r\n\r\n    //set points\r\n    points = [\r\n        this.object.getTopLeft(),\r\n        this.object.getTopRight(),\r\n        this.object.getBottomRight(),\r\n        this.object.getBottomLeft()\r\n    ];\r\n\r\n    //set segments\r\n    for(let i = 0, length = points.length; i < length; i++) {\r\n        if(i+1 < length)\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n        else\r\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n    }\r\n\r\n    this._points = points;\r\n    this._segments = segments;\r\n\r\n    return this;\r\n};\r\n","/**\r\n * Set segment count for cirle's map.\r\n *\r\n * @function Map.setSegmentCount\r\n * @since 0.6.0\r\n *\r\n * @param {integer} [count] - Circle's map segments count.\r\n *\r\n * @return {object} Map object.\r\n */\r\nexport function setSegmentCount(count) {\r\n    this.segmentCount = count;\r\n        this.updateMap();\r\n        return this;\r\n}\r\n","/**\r\n * Set ray angle in radians.\r\n *\r\n * @function Ray.setAngle\r\n * @since 0.6.0\r\n *\r\n * @param {float} [angle] - Ray's angle in radians.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setAngle(angle = 0) {\r\n    this.angle = Phaser.Math.Angle.Normalize(angle);\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Set ray angle in degrees.\r\n *\r\n * @function Ray.setAngleDeg\r\n * @since 0.6.1\r\n *\r\n * @param {float} [angle] - Ray's angle in degrees.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setAngleDeg(angle = 0) {\r\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    return this;\r\n}\r\n","/**\r\n * Cast ray to find closest intersection with tested mapped objects.\r\n *\r\n * @function Ray.cast\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - options that may include:\r\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\r\n * - {Phaser.Types.Math.Vector2Like} [target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\r\n *\r\n * @return {Phaser.Types.Math.Vector2Like} / {boolean} - Point object of ray's closest intersection with tested objects. Returns false if no intersection has been found.\r\n */\r\nexport function cast(options = {}) {\r\n    let closestIntersection;\r\n    let closestDistance = this.range;\r\n    //if bounding box is defined check bounding box intersection\r\n    if(this._raycaster && this._raycaster.boundingBox) {\r\n        let intersections = [];\r\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\r\n        if(intersections.length === 1)\r\n            closestIntersection = intersections[0];\r\n        else if(intersections.length > 1) {\r\n            for(let intersection of intersections) {\r\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\r\n                if(distance < closestDistance) {\r\n                    closestDistance = distance;\r\n                    closestIntersection = intersection;\r\n                }\r\n            }\r\n        }\r\n        //if ray target is declared\r\n        else if(options.target){\r\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\r\n            //if target is within ray range\r\n            if(this.range > distance) {\r\n                closestDistance = distance;\r\n                closestIntersection = options.target;\r\n            }\r\n        }\r\n    }\r\n\r\n    //if no objects to cast ray were passed, use raycasters mapped objects\r\n    if(!options.objects) {\r\n        if(this._raycaster)\r\n            options.objects = this._raycaster.mappedObjects;\r\n        else\r\n            return intersections;\r\n    }\r\n    \r\n    for(let object of options.objects) {\r\n        //check if object is intersected by ray\r\n        if(!Phaser.Geom.Intersects.GetLineToRectangle(this._ray, object.getBounds()))\r\n            continue;\r\n\r\n        let map = object.data.get('raycasterMap');\r\n        \r\n        //check intersections\r\n        for(let segment of map.getSegments(this)) {\r\n            let intersection = [];\r\n\r\n            //if target point is segmemt point\r\n            if(options.target) {\r\n                if(\r\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\r\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\r\n                ) {\r\n                    intersection = options.target;\r\n                }\r\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\r\n                    continue;\r\n            }\r\n            //if no intersection continue\r\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\r\n              continue;\r\n            \r\n            //get closest intersection\r\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\r\n            if(distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestIntersection = intersection;\r\n            }\r\n        }\r\n\r\n        //check arc intersections if its not\r\n        if(map.type === 'Arc') {\r\n           //if arc has generated points (besides tangent points to ray)\r\n            if(map._points.length > 0) {\r\n                continue;\r\n            }\r\n            \r\n            //check if target point is a circle tangent point to ray\r\n            if(options.target) {\r\n                let points = map.getPoints(this);\r\n                let isTangent = false;\r\n                for(let point of points) {\r\n\r\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\r\n                        //get closest intersection\r\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\r\n\r\n                        if(distance < closestDistance) {\r\n                            closestDistance = distance;\r\n                            closestIntersection = point;\r\n                            isTangent = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(isTangent)\r\n                    continue;\r\n            }\r\n\r\n            let circleIntersections = [];\r\n            let offset = new Phaser.Geom.Point();\r\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\r\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\r\n\r\n            //calculate circle's center after rotation\r\n            let rotation = map.object.rotation;\r\n            if(rotation !== 0) {\r\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\r\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\r\n                let cB = vector.getPointB();\r\n                offset.x = cB.x;\r\n                offset.y = cB.y;\r\n            }\r\n\r\n            //create transformed circle\r\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\r\n\r\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\r\n                for(let intersection of circleIntersections) {\r\n                    //get closest intersection\r\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\r\n\r\n                    if(distance < closestDistance) {\r\n\r\n                        closestDistance = distance;\r\n                        closestIntersection = intersection;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!closestIntersection)\r\n        return (this.ignoreNotIntersectedRays) ? false : this._ray.getPointB();\r\n    return new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\r\n}\r\n","/**\r\n * Cast ray in all directions to find closest intersections with tested mapped objects.\r\n *\r\n * @function Ray.castCircle\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - options that may include:\r\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\r\n *\r\n * @return {array} - Array of Point objects of ray's closest intersections with tested objects.\r\n */\r\nexport function castCircle(options = {}) {\r\n    let originalAngle = this.angle;\r\n    let intersections = [];\r\n    let maps = [];\r\n    let rayTargets = [];\r\n    let testedObjects = [];\r\n\r\n    //if no objects to cast ray were passed, use raycasters mapped objects\r\n    if(!options.objects) {\r\n        if(this._raycaster)\r\n            options.objects = this._raycaster.mappedObjects;\r\n        else\r\n            return intersections;\r\n\r\n        //if bounding box is defined add bounding box points to \r\n        if(this._raycaster && this._raycaster.boundingBox) {\r\n            for(let point of this._raycaster.boundingBox.points) {\r\n                rayTargets.push({\r\n                    point: point,\r\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\r\n                });\r\n            }\r\n        }\r\n\r\n        for(let i=0, iLength = options.objects.length; i < iLength; i++) {\r\n            let object = options.objects[i];\r\n            //if bound in range\r\n            if(!this.boundsInRange(object))\r\n                continue;\r\n            \r\n            testedObjects.push(object);\r\n\r\n            let map = object.data.get('raycasterMap');\r\n            maps.push(map);\r\n            //get points and angles\r\n            for(let point of map.getPoints(this)) {\r\n                rayTargets.push({\r\n                    point: point,\r\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\r\n                });\r\n            }\r\n\r\n            //get objects intersections\r\n            for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\r\n                let objectB = options.objects[j];\r\n                let mapB = objectB.data.get('raycasterMap');\r\n                //check if bounding boxes overlap\r\n                if(!Phaser.Geom.Intersects.RectangleToRectangle(object.getBounds(), objectB.getBounds()))\r\n                    continue;\r\n                \r\n                //find objects intersections\r\n                for(let segmentA of map.getSegments(this)) {\r\n                    for(let segmentB of mapB.getSegments(this)) {\r\n                        let intersection = [];\r\n                        if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\r\n                            continue;\r\n                        \r\n                        rayTargets.push({\r\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\r\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //sort target points by angle\r\n        rayTargets.sort(function(a, b){\r\n            //if rays towards points have the same angles promote closer one\r\n            if(a.angle == b.angle) {\r\n                if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) < Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\r\n                    return 1;\r\n                else\r\n                    return -1;\r\n            }\r\n\r\n            return a.angle - b.angle;\r\n        }.bind(this));\r\n\r\n        //cast rays\r\n        for(let target of rayTargets){\r\n            this.setAngle(target.angle);\r\n            let intersection = this.cast({\r\n                objects: testedObjects,\r\n                target: target.point\r\n            });\r\n            if(intersection){\r\n                //if intersection hits target point cast two additional rays\r\n                if(Phaser.Geom.Point.Equals(target.point, intersection)) {\r\n                    this.setAngle(target.angle - 0.0001);\r\n                    let intersectionA = this.cast({\r\n                        objects: testedObjects\r\n                    });\r\n                    if(intersectionA)\r\n                        intersections.push(intersectionA);\r\n                    \r\n                    intersections.push(intersection);\r\n\r\n                    this.setAngle(target.angle + 0.0001);\r\n                    let intersectionB = this.cast({\r\n                        objects: testedObjects\r\n                    });\r\n                    if(intersectionB)\r\n                        intersections.push(intersectionB);\r\n\r\n                    continue;\r\n                }\r\n                intersections.push(intersection);\r\n            }\r\n        }\r\n    }\r\n\r\n    this.setAngle(originalAngle);\r\n    return intersections;\r\n}\r\n","/**\r\n * Cast ray in cone to find closest intersections with tested mapped objects.\r\n *\r\n * @function Ray.castCone\r\n * @since 0.7.0\r\n *\r\n * @param {object} [options] - options that may include:\r\n * - {array} [objects] - Array of game objects to test. If not provided use all mapped game objects.\r\n *\r\n * @return {array} - Array of Point objects of ray's closest intersections with tested objects.\r\n */\r\nexport function castCone(options = {}) {\r\n    let originalAngle = this.angle;\r\n    let intersections = [];\r\n    let maps = [];\r\n    let rayTargets = [];\r\n    let testedObjects = [];\r\n    let cone = this.cone;\r\n    let minAngle = 0;\r\n    let maxAngle = 0;\r\n    let angleOffset = 0;\r\n\r\n    //set cone\r\n    if(options.cone !== undefined)\r\n        cone = options.cone;\r\n    if(options.coneDeg !== undefined)\r\n        cone = Phaser.Math.DegToRad(options.coneDeg);\r\n\r\n    //set cone min and max angle\r\n    minAngle = this.angle - cone / 2;\r\n    maxAngle = this.angle + cone / 2;\r\n\r\n    //add min and max angle points\r\n    this.setAngle(minAngle);\r\n    rayTargets.push({\r\n        point: this._ray.getPointB(),\r\n        angle: minAngle,\r\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\r\n    });\r\n\r\n    this.setAngle(maxAngle);\r\n    rayTargets.push({\r\n        point: this._ray.getPointB(),\r\n        angle: maxAngle,\r\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\r\n    });\r\n\r\n    //if no objects to cast ray were passed, use raycasters mapped objects\r\n    if(!options.objects) {\r\n        if(this._raycaster)\r\n            options.objects = this._raycaster.mappedObjects;\r\n        else\r\n            return intersections;\r\n\r\n        //if bounding box is defined add bounding box points to \r\n        if(this._raycaster && this._raycaster.boundingBox) {\r\n            for(let point of this._raycaster.boundingBox.points) {\r\n\r\n                let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\r\n                let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\r\n\r\n                if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\r\n                    rayTargets.push({\r\n                        point: point,\r\n                        angle: angle,\r\n                        angleOffsetDeg: -angleOffsetDeg\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\r\n        let object = options.objects[i];\r\n        //if bound in range\r\n        if(!this.boundsInRange(object))\r\n            continue;\r\n        \r\n        testedObjects.push(object);\r\n\r\n        let map = object.data.get('raycasterMap');\r\n        maps.push(map);\r\n        //get points and angles\r\n        for(let point of map.getPoints(this)) {\r\n\r\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\r\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\r\n\r\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\r\n                rayTargets.push({\r\n                    point: point,\r\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\r\n                    angleOffsetDeg: -angleOffsetDeg\r\n                });\r\n            }\r\n        }\r\n\r\n        //get objects intersections\r\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\r\n            let objectB = options.objects[j];\r\n            let mapB = objectB.data.get('raycasterMap');\r\n            //check if bounding boxes overlap\r\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(object.getBounds(), objectB.getBounds()))\r\n                continue;\r\n            \r\n            //find objects intersections\r\n            for(let segmentA of map.getSegments(this)) {\r\n                for(let segmentB of mapB.getSegments(this)) {\r\n                    let intersection = [];\r\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\r\n                        continue;\r\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\r\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\r\n\r\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\r\n                        rayTargets.push({\r\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\r\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\r\n                            angleOffsetDeg: -angleOffsetDeg\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //sort target points by angle\r\n    rayTargets.sort(function(a, b){\r\n        //if rays towards points have the same angles promote closer one\r\n        if(a.angle == b.angle) {\r\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) < Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\r\n                return 1;\r\n            else\r\n                return -1;\r\n        }\r\n\r\n        return a.angleOffsetDeg - b.angleOffsetDeg;\r\n    }.bind(this));\r\n\r\n    //cast rays\r\n    for(let target of rayTargets){\r\n        this.setAngle(target.angle);\r\n        let intersection = this.cast({\r\n            objects: testedObjects,\r\n            target: target.point\r\n        });\r\n        if(intersection){\r\n            //if intersection hits target point cast two additional rays\r\n            if(Phaser.Geom.Point.Equals(target.point, intersection)) {\r\n                this.setAngle(target.angle - 0.0001);\r\n                let intersectionA = this.cast({\r\n                    objects: testedObjects\r\n                });\r\n                if(intersectionA)\r\n                    intersections.push(intersectionA);\r\n                \r\n                intersections.push(intersection);\r\n\r\n                this.setAngle(target.angle + 0.0001);\r\n                let intersectionB = this.cast({\r\n                    objects: testedObjects\r\n                });\r\n                if(intersectionB)\r\n                    intersections.push(intersectionB);\r\n\r\n                continue;\r\n            }\r\n            intersections.push(intersection);\r\n        }\r\n    }\r\n\r\n    this.setAngle(originalAngle);\r\n    return intersections;\r\n}\r\n","/**\r\n * Set ray's cone angle in radians.\r\n *\r\n * @function Ray.setAngle\r\n * @since 0.7.0\r\n *\r\n * @param {float} [cone] - Ray's cone angle in radians.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setCone(cone = 0) {\r\n    this.cone = cone;\r\n    return this;\r\n}\r\n\r\n/**\r\n * Set ray's cone angle in degrees.\r\n *\r\n * @function Ray.setAngleDeg\r\n * @since 0.7.0\r\n *\r\n * @param {float} [cone] - Ray's cone angle in degrees.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setConeDeg(cone = 0) {\r\n    this.cone = Phaser.Math.DegToRad(cone);\r\n    return this;\r\n}\r\n","/**\r\n * Configure ray on creation.\r\n *\r\n * @function Ray.config\r\n * @since 0.6.0\r\n *\r\n * @param {object} [options] - Ray's congfiguration options. May include:\r\n * - {Phaser.Types.Math.Vector2Like} [origin] = {x:0, y:0} - Ray's position.\r\n * - {float} [angle] = 0 - Ray's angle in radians.\r\n * - {float} [angleDeg] = 0 - Ray's angle in degrees.\r\n * - {float} [cone] = 0 - Ray's cone angle in radians.\r\n * - {float} [coneDeg] = 0 - Ray's cone angle in degrees.\r\n * - {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\r\n * - {integer} [detectionRange] = Phaser.Math.MAX_SAFE_INTEGER - Maximum distance between ray's position and tested objects bounding boxes.\r\n * - {boolean} [ignoreNotIntersectedRays] = true - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function config(options) {\r\n    this.object = options.object;\r\n    //origin\r\n    if(options.origin)\r\n        this.origin.setTo(options.origin.x, options.origin.y);\r\n\r\n    //angle\r\n    if(options.angle)\r\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\r\n\r\n    //angle deg\r\n    if(options.angleDeg)\r\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\r\n\r\n    //cone angle\r\n    if(options.cone)\r\n        this.cone = options.cone;\r\n\r\n    //cone angle deg\r\n    if(options.coneDeg)\r\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\r\n\r\n    //range (0 = max)\r\n    if(options.range)\r\n        this.range = options.range;\r\n\r\n    //detection range (0 = max)\r\n    if(options.detectionRange)\r\n        this.detectionRange = options.detectionRange;\r\n\r\n    if(options.ignoreNotIntersectedRays !== undefined)\r\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\r\n    \r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n\r\n    return this;\r\n}\r\n","/**\r\n * Set ray's position.\r\n *\r\n * @function Ray.setOrigin\r\n * @since 0.6.0\r\n *\r\n * @param {integer} x - X coordinate.\r\n * @param {integer} y - Y coordinate.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setOrigin(x, y) {\r\n    this.origin.setTo(x, y);\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n    return this;\r\n}\r\n","/**\r\n * Set ray's range.\r\n *\r\n * @function Ray.setRange\r\n * @since 0.6.0\r\n *\r\n * @param {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setRange(range = Phaser.Math.MAX_SAFE_INTEGER) {\r\n    this.range = range;\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Set ray's range.\r\n *\r\n * @function Ray.setRange\r\n * @since 0.6.0\r\n *\r\n * @param {integer} [detectionRange] = Phaser.Math.MAX_SAFE_INTEGER - Maximum distance between ray's position and tested objects bounding boxes.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setDetectionRange(detectionRange = 0) {\r\n    this.detectionRange = detectionRange;\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n    return this;\r\n}\r\n\r\n/**\r\n * Test if object's bounding box is in ray's detection range.\r\n *\r\n * @function Ray.boundsInRange\r\n * @since 0.6.0\r\n *\r\n * @param {object} object - Tested object\r\n * @param {Phaser.Geom. Rectangle} / {boolean} [bounds] = false - Tested object's bounds. If not passed bounds will be generated.\r\n *\r\n * @return {boolean} Information if object is in ray's detection range.\r\n */\r\nexport function boundsInRange(object, bounds = false) {\r\n    if(!this.detectionRange)\r\n        return true;\r\n\r\n    let objectBounds;\r\n    if(bounds)\r\n        objectBounds = bounds;\r\n    else\r\n        objectBounds = object.getBounds();\r\n\r\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\r\n        return true;\r\n\r\n    return false;\r\n}\r\n","/**\r\n * @classdesc\r\n *\r\n * Ray class responible for casting ray's and testing their collisions with mapped objects.\r\n *\r\n * @class Ray\r\n * @memberof Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Ray specific configuration settings.\r\n * @param {Raycaster} [raycaster] - Parent raycaster object.\r\n */\r\nexport function Ray(options, raycaster) {\r\n    this.origin = new Phaser.Geom.Point();\r\n    this._ray = new Phaser.Geom.Line();\r\n    this.angle = 0;\r\n    this.cone = 0;\r\n    this.range = Phaser.Math.MAX_SAFE_INTEGER;\r\n    this.detectionRange = 0;\r\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\r\n    this.ignoreNotIntersectedRays = true;\r\n    this.intersections = [];\r\n    this._raycaster = raycaster ? raycaster : false;\r\n\r\n    this.config(options);\r\n};\r\n\r\nRay.prototype = {\r\n    config: require('./config.js').config,\r\n    setRay: require('./ray.js').setRay,    \r\n    setOrigin: require('./origin.js').setOrigin,\r\n    setRange: require('./range.js').setRange,\r\n    setAngle: require('./angle.js').setAngle,\r\n    setAngleDeg: require('./angle.js').setAngleDeg,\r\n    setCone: require('./cone.js').setCone,\r\n    setConeDeg: require('./cone.js').setConeDeg,\r\n    setDetectionRange: require('./range.js').setDetectionRange,\r\n    boundsInRange: require('./range.js').boundsInRange,\r\n    cast: require('./cast.js').cast,\r\n    castCircle: require('./castCircle.js').castCircle,\r\n    castCone: require('./castCone.js').castCone\r\n};\r\n","/**\r\n * Set ray's position, direction (angle) and range.\r\n *\r\n * @function Ray.setAngle\r\n * @since 0.6.0\r\n *\r\n * @param {integer} x - X coordinate.\r\n * @param {integer} y - Y coordinate.\r\n * @param {float} [angle] - Ray's angle in radians.\r\n * @param {integer} [range] = Phaser.Math.MAX_SAFE_INTEGER - Ray's range.\r\n *\r\n * @return {object} Ray object.\r\n */\r\nexport function setRay(x, y, angle, range = Phaser.Math.MAX_SAFE_INTEGER) {\r\n    this.origin.setTo(x, y);\r\n    this.angle = Phaser.Math.Angle.Normalize(angle);\r\n    this.range = range;\r\n\r\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.range);\r\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\r\n    return this;\r\n}\r\n","/**\r\n* @author       Marcin Walczak <mail@marcinwalczak.pl>\r\n* @copyright    2020 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responible for creating ray objects and managing mapped objects.\r\n *\r\n * @class Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} options - Ray specific configuration settings.\r\n */\r\nexport function Raycaster(options) {\r\n    this.version = '0.7.2';\r\n    this.scene;\r\n    this.graphics;\r\n    this.boundingBox = false;\r\n    this.mappedObjects = [];\r\n    this.sortedPoints = [];\r\n    this.mapSegmentCount = 0;   //quantity of segments of map of circle\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined && options.scene.physics !== undefined)\r\n            options.boundingBox = options.scene.physics.world.bounds;\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update.bind(this));\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update.bind(this));\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    //set options\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n        }\r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    //set bounding box\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    //map object\r\n    mapGameObjects: function(objects, dynamic = false, segmentCount = this.mapSegmentCount) {\r\n        if(!Array.isArray(objects)) {\r\n            if(this.mappedObjects.includes(objects))\r\n                return this;\r\n\r\n            if(!objects.data)\r\n                objects.setDataEnabled();\r\n\r\n            let map = new this.Map({\r\n                object: objects,\r\n                dynamic: dynamic,\r\n                segmentCount: segmentCount\r\n            });\r\n\r\n            objects.data.set('raycasterMap', map);\r\n            this.mappedObjects.push(objects);\r\n\r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            if(!object.data)\r\n                object.setDataEnabled();\r\n\r\n            let map = new this.Map({\r\n                object: object,\r\n                dynamic: dynamic,\r\n                segmentCount: segmentCount\r\n            });\r\n\r\n            object.data.set('raycasterMap', map);\r\n            this.mappedObjects.push(object);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    //remove mapped Objects\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            let index = this.mappedObjects.indexOf(objects);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1)\r\n            return this;\r\n        }\r\n\r\n        for(let object of objects) {\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1)\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //enable maps\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            if(objects.data) {\r\n                let map = objects.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = true;\r\n            }\r\n                \r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(object.data) {\r\n                let map = object.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = true;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //disable maps\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects)) {\r\n            if(objects.data) {\r\n                let map = objects.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = false;\r\n            }\r\n                \r\n            return this;\r\n        }\r\n        \r\n        for(let object of objects) {\r\n            if(object.data) {\r\n                let map = object.data.get('raycasterMap');\r\n                if(map)\r\n                    map.active = false;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //scene update event listener\r\n    update: function() {\r\n        //update dynamic maps\r\n        if(this.mappedObjects.length > 0)\r\n            for(let mapppedObject of this.mappedObjects) {\r\n                if(mapppedObject.data === undefined)\r\n                    continue;\r\n\r\n                let map = mapppedObject.data.get('raycasterMap')\r\n                if(map.dynamic)\r\n                    map.updateMap();\r\n            }\r\n    },\r\n\r\n    //ray factory\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n"],"sourceRoot":""}